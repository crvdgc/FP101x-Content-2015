[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 162
Active Line: 174

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.18,0:00:07.14,Default,,0,0,0,,大家好 欢迎回到 FP101x 函数式程序设计
Dialogue: 0,0:00:07.14,0:00:18.16,Default,,0,0,0,,今天要学的是 Haskell 的简单入门
Dialogue: 0,0:00:18.16,0:00:21.39,Default,,0,0,0,,我最喜欢的电影之一是
Dialogue: 0,0:00:21.39,0:00:25.89,Default,,0,0,0,,龙威小子 如果你没看过这部电影
Dialogue: 0,0:00:25.89,0:00:32.20,Default,,0,0,0,,现在把视频停下来 先去看电影
Dialogue: 0,0:00:32.20,0:00:37.03,Default,,0,0,0,,每当我需要学习新东西时 我都重看一遍 龙威小子
Dialogue: 0,0:00:37.03,0:00:47.82,Default,,0,0,0,,我可以告诉你 我看过 20 到 30 遍 每一次我看的时候 我都会学到一些新的东西
Dialogue: 0,0:00:47.82,0:00:50.89,Default,,0,0,0,,如果你看了这部电影 你就知道
Dialogue: 0,0:00:50.89,0:00:55.50,Default,,0,0,0,,这边的男孩 丹尼尔 想要学习空手道
Dialogue: 0,0:00:55.50,0:01:03.32,Default,,0,0,0,,而这位宫城先生却让他做了许多
Dialogue: 0,0:01:03.32,0:01:08.32,Default,,0,0,0,,丹尼尔认为没有意义的练习 他十分不耐烦
Dialogue: 0,0:01:08.32,0:01:15.65,Default,,0,0,0,,但为了学新东西 必须进行许多练习 因为这涉及到肌肉记忆
Dialogue: 0,0:01:15.65,0:01:20.04,Default,,0,0,0,,或者对应到编程中 手指记忆
Dialogue: 0,0:01:20.04,0:01:22.95,Default,,0,0,0,,那些是不需要特殊考虑的事情
Dialogue: 0,0:01:22.95,0:01:27.52,Default,,0,0,0,,需要反复训练的 一次又一次地重复
Dialogue: 0,0:01:27.52,0:01:32.43,Default,,0,0,0,,这就是我们今天的课程中要做的事情
Dialogue: 0,0:01:32.43,0:01:36.07,Default,,0,0,0,,所以别像丹尼尔一样不耐烦
Dialogue: 0,0:01:36.07,0:01:40.28,Default,,0,0,0,,像一个大人一样 把该做的练习做了
Dialogue: 0,0:01:40.28,0:01:44.42,Default,,0,0,0,,一遍 又一遍 一遍 又一遍
Dialogue: 0,0:01:44.42,0:01:47.64,Default,,0,0,0,,直到它完全成为下意识行为
Dialogue: 0,0:01:47.64,0:01:51.45,Default,,0,0,0,,这样你的脑力才能用来解决真正的问题
Dialogue: 0,0:01:51.45,0:01:56.54,Default,,0,0,0,,不用再考虑基础问题了 每次学习新东西时
Dialogue: 0,0:01:56.54,0:02:01.04,Default,,0,0,0,,你都可以重新看这部优秀的电影
Dialogue: 0,0:02:01.04,0:02:05.56,Default,,0,0,0,,让我们看一点 Haskell 吧 这门课程中使用的
Dialogue: 0,0:02:05.56,0:02:10.31,Default,,0,0,0,,Haskell 实现是 Glasgow Haskell Compiler
Dialogue: 0,0:02:10.31,0:02:13.53,Default,,0,0,0,,有时也被称为荣耀的（Glorious） Haskell 编译器
Dialogue: 0,0:02:13.53,0:02:18.19,Default,,0,0,0,,GHC 是一个领先的 Haskell 实现
Dialogue: 0,0:02:18.19,0:02:23.54,Default,,0,0,0,,它既有编译器 又有交互式的
Dialogue: 0,0:02:23.54,0:02:26.90,Default,,0,0,0,,REPL 循环（Read Evaluate Print Loop）供你输入代码
Dialogue: 0,0:02:26.90,0:02:37.45,Default,,0,0,0,,GHC解释器的这种交互式的特性 让用 Haskell 进行试验十分容易
Dialogue: 0,0:02:37.45,0:02:40.76,Default,,0,0,0,,因此对这门课也很有用
Dialogue: 0,0:02:40.76,0:02:50.51,Default,,0,0,0,,许多练习都可以使用 GHC 来完成
Dialogue: 0,0:02:50.51,0:02:54.80,Default,,0,0,0,,我不认为这是作弊
Dialogue: 0,0:02:54.80,0:02:59.73,Default,,0,0,0,,作为程序员 我们的确应该用编译器来帮助我们
Dialogue: 0,0:02:59.73,0:03:04.42,Default,,0,0,0,,计算机是用来帮助我们编程的
Dialogue: 0,0:03:04.42,0:03:08.66,Default,,0,0,0,,如果我们非要不用 那就太蠢了
Dialogue: 0,0:03:08.66,0:03:14.07,Default,,0,0,0,,GHC 可以从这个网站中免费获得 这个链接
Dialogue: 0,0:03:14.07,0:03:17.88,Default,,0,0,0,,也同样会放在课程网站上 你也可以
Dialogue: 0,0:03:17.88,0:03:21.22,Default,,0,0,0,,谷歌或者必应搜索 Haskell platform
Dialogue: 0,0:03:21.22,0:03:29.91,Default,,0,0,0,,这一实现在主流平台比如 Mac Windows 和 Linux 上 都可以使用 要启动 GHC
Dialogue: 0,0:03:29.91,0:03:33.84,Default,,0,0,0,,只需要从命令行输入 ghci 命令
Dialogue: 0,0:03:33.84,0:03:41.23,Default,,0,0,0,,之后你可以看到 一些文字提示和一个提示符
Dialogue: 0,0:03:41.23,0:03:44.97,Default,,0,0,0,,Prelude> 你可以在这里打字输入表达式了
Dialogue: 0,0:03:44.97,0:03:53.15,Default,,0,0,0,,比如我们可以输入表达式 2 + 3 * 4
Dialogue: 0,0:03:53.15,0:03:57.69,Default,,0,0,0,,GHCi 就会打印对应的结果 此时我们其实是
Dialogue: 0,0:03:57.69,0:04:01.38,Default,,0,0,0,,将 GHCi 当成计算器来用
Dialogue: 0,0:04:01.38,0:04:05.25,Default,,0,0,0,,有点像命令行界面的计算器
Dialogue: 0,0:04:05.25,0:04:10.34,Default,,0,0,0,,而不是用按钮输入的计算器 我们在这里可以看到
Dialogue: 0,0:04:10.34,0:04:13.68,Default,,0,0,0,,2 + 3 * 4 的值显然是 14
Dialogue: 0,0:04:13.68,0:04:17.45,Default,,0,0,0,,因此乘法的优先级比加法更高
Dialogue: 0,0:04:17.45,0:04:20.64,Default,,0,0,0,,大部分语言中都是这样的
Dialogue: 0,0:04:20.64,0:04:24.45,Default,,0,0,0,,也没什么好奇怪的
Dialogue: 0,0:04:24.45,0:04:28.45,Default,,0,0,0,,如果我们想先进行加法 再进行乘法
Dialogue: 0,0:04:28.45,0:04:31.51,Default,,0,0,0,,就需要加上括号 因此改写成 (2 + 3) * 4
Dialogue: 0,0:04:31.51,0:04:35.91,Default,,0,0,0,,结果是 20 我们可以
Dialogue: 0,0:04:35.91,0:04:40.88,Default,,0,0,0,,对更复杂表达式求值 比如 (3 ^ 2 + 4 ^ 2) 的平方根
Dialogue: 0,0:04:41.63,0:04:46.69,Default,,0,0,0,,结果是 5
Dialogue: 0,0:04:46.69,0:04:53.49,Default,,0,0,0,,你可以看到这里的 Prelude> 提示符
Dialogue: 0,0:04:53.49,0:04:59.39,Default,,0,0,0,,Haskell 的 Prelude 好比 Java 的 JDK 包括了许多标准函数
Dialogue: 0,0:04:59.39,0:05:03.33,Default,,0,0,0,,内置在 Haskell 中的 在网站上
Dialogue: 0,0:05:03.33,0:05:07.93,Default,,0,0,0,,将展示获得其他 Haskell 库的方法
Dialogue: 0,0:05:07.93,0:05:13.62,Default,,0,0,0,,但现在先不要引入过多细节
Dialogue: 0,0:05:13.62,0:05:16.74,Default,,0,0,0,,你可以读一下那些 但现在
Dialogue: 0,0:05:16.74,0:05:21.39,Default,,0,0,0,,我们专注于标准的库函数 也就是标准的 Prelude
Dialogue: 0,0:05:21.39,0:05:27.68,Default,,0,0,0,,Prelude 中的很多函数
Dialogue: 0,0:05:27.68,0:05:30.71,Default,,0,0,0,,都是关于列表（List）的函数
Dialogue: 0,0:05:30.71,0:05:34.75,Default,,0,0,0,,我们将举几个例子 之后的课程中
Dialogue: 0,0:05:34.75,0:05:38.81,Default,,0,0,0,,会用几种不同的方式实现这些函数
Dialogue: 0,0:05:38.81,0:05:42.50,Default,,0,0,0,,第一个函数是 head 接收一个列表作为输入
Dialogue: 0,0:05:42.50,0:05:46.35,Default,,0,0,0,,在 Haskell 中 列表的表示方式是用方括号
Dialogue: 0,0:05:46.35,0:05:48.28,Default,,0,0,0,,元素用逗号分开
Dialogue: 0,0:05:48.28,0:05:52.03,Default,,0,0,0,,因此 [1,2,3,4,5] 的 head 就是
Dialogue: 0,0:05:52.03,0:05:56.11,Default,,0,0,0,,不出意外地是 1 而 tail
Dialogue: 0,0:05:56.11,0:06:00.13,Default,,0,0,0,,和 head 相对 取列表中除了第一个元素（head）以外的所有元素
Dialogue: 0,0:06:00.13,0:06:03.34,Default,,0,0,0,,因此 [1,2,3,4,5] 的 tail 就是
Dialogue: 0,0:06:03.34,0:06:07.71,Default,,0,0,0,,列表 [2,3,4,5]
Dialogue: 0,0:06:07.71,0:06:11.36,Default,,0,0,0,,我们也可以选中列表的第 n 个元素
Dialogue: 0,0:06:11.36,0:06:16.25,Default,,0,0,0,,使用双叹号操作符 如果想选中第二个元素
Dialogue: 0,0:06:16.25,0:06:20.32,Default,,0,0,0,,从列表 [1,2,3,4,5] 中 就可以得到
Dialogue: 0,0:06:20.32,0:06:24.03,Default,,0,0,0,,3 这告诉我们什么呢
Dialogue: 0,0:06:24.03,0:06:29.61,Default,,0,0,0,,列表的第一个元素下标是 0
Dialogue: 0,0:06:29.61,0:06:36.84,Default,,0,0,0,,Haskell 从 0 开始算数组的下标
Dialogue: 0,0:06:36.84,0:06:44.15,Default,,0,0,0,,这里使用两个叹号作为标志 这么做是有道理的 因为在 Haskell 中
Dialogue: 0,0:06:44.15,0:06:47.18,Default,,0,0,0,,列表不是数组 所以用下标访问列表
Dialogue: 0,0:06:47.18,0:06:50.90,Default,,0,0,0,,比如取列表中下标为 2 的元素
Dialogue: 0,0:06:50.90,0:06:54.72,Default,,0,0,0,,会遍历整个列表 因此我们遍历列表 去掉 1
Dialogue: 0,0:06:54.72,0:06:59.50,Default,,0,0,0,,再去掉 2 最终返回 3 完成操作所需要的时间并不是常数
Dialogue: 0,0:06:59.50,0:07:04.20,Default,,0,0,0,,用下标访问列表 和用下标访问数组不同
Dialogue: 0,0:07:04.20,0:07:07.91,Default,,0,0,0,,在 Haskell 中所需时间和下标数呈线性关系
Dialogue: 0,0:07:07.91,0:07:13.59,Default,,0,0,0,,更一般地 和列表的长度呈线性关系
Dialogue: 0,0:07:13.59,0:07:24.62,Default,,0,0,0,,幸运的是 很少在实际中用到这个操作符
Dialogue: 0,0:07:24.62,0:07:28.55,Default,,0,0,0,,如果想用下标访问数组
Dialogue: 0,0:07:28.55,0:07:34.18,Default,,0,0,0,,就说明自己没有做足够的练习
Dialogue: 0,0:07:34.18,0:07:37.56,Default,,0,0,0,,仍然还在使用那套过程式程序设计的思维
Dialogue: 0,0:07:37.56,0:07:40.68,Default,,0,0,0,,也就是使用数组的思维
Dialogue: 0,0:07:40.68,0:07:48.30,Default,,0,0,0,,在 Haskell 中 我们通常使用高阶函数 比如 map filter fold 而非下标
Dialogue: 0,0:07:48.30,0:07:53.11,Default,,0,0,0,,在列表上进行复杂操作 看下一个例子
Dialogue: 0,0:07:53.11,0:07:59.71,Default,,0,0,0,,take 3 取出列表的前三个元素
Dialogue: 0,0:07:59.71,0:08:01.18,Default,,0,0,0,,如果我们传入列表 [1,2,3,4,5]
Dialogue: 0,0:08:01.18,0:08:04.68,Default,,0,0,0,,它就返回前三个元素
Dialogue: 0,0:08:04.68,0:08:11.61,Default,,0,0,0,,[1,2,3] 而 drop 与之相反 它接受一个数字
Dialogue: 0,0:08:11.61,0:08:16.71,Default,,0,0,0,,和一个列表 然后去掉列表的前三个元素
Dialogue: 0,0:08:16.71,0:08:20.81,Default,,0,0,0,,某种程度上 drop 和 take 是
Dialogue: 0,0:08:20.81,0:08:24.30,Default,,0,0,0,,head 和 tail 的推广 head 和 tail
Dialogue: 0,0:08:24.30,0:08:33.13,Default,,0,0,0,,只取列表的第一个元素和其余的元素 而 take 和 drop 可以推广到任意个数
Dialogue: 0,0:08:33.13,0:08:44.93,Default,,0,0,0,,计算列表的长度 可以调用 length 函数 [1,2,3,4,5] 的长度是 5
Dialogue: 0,0:08:44.93,0:08:49.18,Default,,0,0,0,,这里需要再提一下 Haskell 中的列表和其他语言中的数组不同
Dialogue: 0,0:08:49.18,0:08:53.91,Default,,0,0,0,,因此计算长度不是一个常数时间的操作
Dialogue: 0,0:08:53.91,0:08:58.07,Default,,0,0,0,,花费的时间和列表的长度呈线性关系
Dialogue: 0,0:08:58.07,0:09:04.89,Default,,0,0,0,,sum 计算所有元素的和 如果将 [1,2,3,4,5] 传入 sum
Dialogue: 0,0:09:04.89,0:09:09.04,Default,,0,0,0,,结果就是 15 product
Dialogue: 0,0:09:09.04,0:09:17.08,Default,,0,0,0,,和 sum 类似 但不是加起来 而是乘起来
Dialogue: 0,0:09:17.08,0:09:21.52,Default,,0,0,0,,1, 2, 3, 4, 5 的乘积 和 5 的阶乘一样
Dialogue: 0,0:09:21.52,0:09:27.64,Default,,0,0,0,,是 120 另一个常用的操作是连接两个列表
Dialogue: 0,0:09:27.64,0:09:30.29,Default,,0,0,0,,拿两个列表 把它们合成一个新的列表
Dialogue: 0,0:09:30.29,0:09:33.57,Default,,0,0,0,,比如在 [1,2,3] 后面接上 [4,5]
Dialogue: 0,0:09:33.57,0:09:43.22,Default,,0,0,0,,就得到了列表 [1,2,3,4,5] 这里的最后一个函数是取列表的倒序
Dialogue: 0,0:09:43.22,0:09:46.26,Default,,0,0,0,,reverse [1,2,3,4,5] 得到
Dialogue: 0,0:09:46.26,0:09:50.38,Default,,0,0,0,,[5,4,3,2,1] 之后的课程中
Dialogue: 0,0:09:50.38,0:09:54.99,Default,,0,0,0,,我们将用多种方式自己定义这些函数
Dialogue: 0,0:09:54.99,0:10:01.60,Default,,0,0,0,,现在可以试试它们能干什么
Dialogue: 0,0:10:01.60,0:10:05.04,Default,,0,0,0,,然后就可以准备好实现它们
Dialogue: 0,0:10:05.04,0:10:08.64,Default,,0,0,0,,因为我们就会知道它们应该做什么了
Dialogue: 0,0:10:08.64,0:10:16.26,Default,,0,0,0,,这是一张很重要的幻灯片
Dialogue: 0,0:10:16.26,0:10:20.83,Default,,0,0,0,,是关于函数调用的
Dialogue: 0,0:10:20.83,0:10:24.45,Default,,0,0,0,,Haskell 和数学十分不同
Dialogue: 0,0:10:24.45,0:10:27.70,Default,,0,0,0,,同时也和其他的编程语言不同
Dialogue: 0,0:10:27.70,0:10:32.91,Default,,0,0,0,,在数学中 当我们应用一个函数时
Dialogue: 0,0:10:32.91,0:10:34.86,Default,,0,0,0,,也就是你在学校中学分析时所用的数学中
Dialogue: 0,0:10:34.86,0:10:38.10,Default,,0,0,0,,当将一个函数应用到一个参数上时
Dialogue: 0,0:10:38.10,0:10:45.10,Default,,0,0,0,,总使用括号 在这里 我们应用一个函数
Dialogue: 0,0:10:45.10,0:10:55.91,Default,,0,0,0,,即 f 应用到参数 a 和 b 上 然后加上 c 空格 d 在数学中
Dialogue: 0,0:10:55.91,0:10:59.46,Default,,0,0,0,,一般遵从物理的记号
Dialogue: 0,0:10:59.46,0:11:03.72,Default,,0,0,0,,也就是空格的意思是乘法
Dialogue: 0,0:11:03.72,0:11:07.30,Default,,0,0,0,,如果你在一本数学教材中
Dialogue: 0,0:11:07.30,0:11:11.43,Default,,0,0,0,,看到 c d 这样的写法
Dialogue: 0,0:11:11.43,0:11:14.80,Default,,0,0,0,,通常意味着 c 乘以 d
Dialogue: 0,0:11:14.80,0:11:18.48,Default,,0,0,0,,因此应用一个函数时 需要使用
Dialogue: 0,0:11:18.48,0:11:24.33,Default,,0,0,0,,括号来消除歧义 因为在 Haskell 中
Dialogue: 0,0:11:24.33,0:11:27.53,Default,,0,0,0,,函数调用远比乘法更常用
Dialogue: 0,0:11:27.53,0:11:30.99,Default,,0,0,0,,而在物理中
Dialogue: 0,0:11:30.99,0:11:34.63,Default,,0,0,0,,乘法更常用 因此将空白记号分配给乘法
Dialogue: 0,0:11:34.63,0:11:40.08,Default,,0,0,0,,也就是看不到的记号
Dialogue: 0,0:11:40.08,0:11:43.68,Default,,0,0,0,,最 空 的记号 而在 Haskell 中
Dialogue: 0,0:11:43.68,0:11:46.68,Default,,0,0,0,,函数调用用空白符号来表示
Dialogue: 0,0:11:46.68,0:11:50.05,Default,,0,0,0,,因此符号才不至于太多
Dialogue: 0,0:11:50.05,0:11:54.05,Default,,0,0,0,,所以在 Haskell 中 不写 f (a,b) + c d
Dialogue: 0,0:11:54.05,0:12:02.66,Default,,0,0,0,,函数调用使用空格表示 因此写成 f a b + c * d
Dialogue: 0,0:12:06.18,0:12:18.54,Default,,0,0,0,,在多数编程语言中要写 f (a, b) 某种程度上
Dialogue: 0,0:12:18.54,0:12:23.68,Default,,0,0,0,,这是两种最差的写法的结合 需要把一切都显式地写出来
Dialogue: 0,0:12:23.68,0:12:35.50,Default,,0,0,0,,Haskell 决定函数调用拿空格来表示 乘法用乘号来表示
Dialogue: 0,0:12:35.50,0:12:42.48,Default,,0,0,0,,此外 函数调用优先级更高
Dialogue: 0,0:12:42.48,0:12:45.79,Default,,0,0,0,,比任何其他操作符都高 如果看到
Dialogue: 0,0:12:45.79,0:12:49.82,Default,,0,0,0,,f a + b 含义就是 f 应用到 a 上
Dialogue: 0,0:12:49.82,0:12:52.97,Default,,0,0,0,,结果再加上 b 而不是将 f
Dialogue: 0,0:12:52.97,0:12:57.25,Default,,0,0,0,,应用到 (a + b) 的结果上
Dialogue: 0,0:12:57.25,0:13:01.08,Default,,0,0,0,,大家需要适应一下这种写法 它的意思不是
Dialogue: 0,0:13:01.08,0:13:04.21,Default,,0,0,0,,f 乘以 a 再加上 b 而是
Dialogue: 0,0:13:04.21,0:13:12.37,Default,,0,0,0,,f 应用到 a 上 再加上 b 好比乘法比加法的优先级高
Dialogue: 0,0:13:12.37,0:13:20.21,Default,,0,0,0,,这张表格给出了 一些表达式
Dialogue: 0,0:13:20.21,0:13:23.41,Default,,0,0,0,,这边是 Haskell 的写法
Dialogue: 0,0:13:23.41,0:13:27.75,Default,,0,0,0,,另一边是数学的写法 这些写法是你应该忘记的
Dialogue: 0,0:13:27.75,0:13:31.24,Default,,0,0,0,,让我把它挡起来 这你是你应该忘记的东西
Dialogue: 0,0:13:31.24,0:13:34.32,Default,,0,0,0,,这边是你应该学习的东西
Dialogue: 0,0:13:34.32,0:13:42.67,Default,,0,0,0,,所以忘了我身后这边的写法 学习另一边的写法
Dialogue: 0,0:13:42.67,0:13:45.89,Default,,0,0,0,,不是写 f 括号 x 而是写
Dialogue: 0,0:13:45.89,0:13:50.42,Default,,0,0,0,,f 空格 x 不写 f 传入两个参数
Dialogue: 0,0:13:50.42,0:13:55.23,Default,,0,0,0,,而是写 f 应用到 x 上 再把结果应用到 y 上
Dialogue: 0,0:13:55.23,0:14:00.54,Default,,0,0,0,,不是写 f 括号 g 括号 x 而是写
Dialogue: 0,0:14:00.54,0:14:04.11,Default,,0,0,0,,f 应用到 g 在 x 上应用的结果 后面我们可以看到
Dialogue: 0,0:14:04.11,0:14:07.12,Default,,0,0,0,,我们可以用复合函数的方法写成
Dialogue: 0,0:14:07.12,0:14:11.68,Default,,0,0,0,,f 复合到 g 上
Dialogue: 0,0:14:11.68,0:14:18.72,Default,,0,0,0,,其他的例子应该很显然
Dialogue: 0,0:14:18.72,0:14:22.68,Default,,0,0,0,,如果你只看它们的形状 别去解释它们 你就能发现
Dialogue: 0,0:14:22.68,0:14:27.65,Default,,0,0,0,,这边的 Haskell 代码比那边的更加简洁
Dialogue: 0,0:14:27.65,0:14:33.07,Default,,0,0,0,,Haskell 程序员都很懒 不想打太多字
Dialogue: 0,0:14:33.07,0:14:36.47,Default,,0,0,0,,因此这样看起来漂亮很多
Dialogue: 0,0:14:36.47,0:14:39.86,Default,,0,0,0,,这也是 Haskell 语法这样设计的原因
Dialogue: 0,0:14:39.86,0:14:43.35,Default,,0,0,0,,十分感谢 第 1 部分到此结束了
Dialogue: 0,0:14:43.35,0:14:47.32,Default,,0,0,0,,让我们在第 1 章剩下的部分再见吧
