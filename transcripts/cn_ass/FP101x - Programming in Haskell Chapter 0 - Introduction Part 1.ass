[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 105
Active Line: 106

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.52,0:00:03.56,Default,,0,0,0,,欢迎大家参加
Dialogue: 0,0:00:03.56,0:00:08.84,Default,,0,0,0,,FP101x 函数式程序设计
Dialogue: 0,0:00:08.84,0:00:12.82,Default,,0,0,0,,这门慕课
Dialogue: 0,0:00:12.82,0:00:17.82,Default,,0,0,0,,让我们现在就开始吧
Dialogue: 0,0:00:17.82,0:00:23.48,Default,,0,0,0,,在讨论其他事情之前 我想说的是
Dialogue: 0,0:00:23.48,0:00:28.16,Default,,0,0,0,,正如标题所说 这门慕课是关于函数式程序设计的
Dialogue: 0,0:00:28.16,0:00:33.92,Default,,0,0,0,,它不是一门 Haskell 课程 我们是将 Haskell
Dialogue: 0,0:00:33.92,0:00:39.37,Default,,0,0,0,,作为一门函数式语言 但我们不是学习如何用 Haskell 编程的
Dialogue: 0,0:00:39.37,0:00:42.46,Default,,0,0,0,,让我给你讲一个小故事吧
Dialogue: 0,0:00:42.46,0:00:46.00,Default,,0,0,0,,我经常旅行 开会
Dialogue: 0,0:00:46.00,0:00:49.20,Default,,0,0,0,,讲课 等等
Dialogue: 0,0:00:49.20,0:00:52.98,Default,,0,0,0,,旅行途中 我有很多时间来看电视
Dialogue: 0,0:00:52.98,0:00:57.52,Default,,0,0,0,,有一天晚上 当我随意调台时
Dialogue: 0,0:00:57.52,0:01:00.77,Default,,0,0,0,,看到一档求生类节目
Dialogue: 0,0:01:00.77,0:01:03.96,Default,,0,0,0,,里面一个人试着在晚上扎营
Dialogue: 0,0:01:03.96,0:01:07.34,Default,,0,0,0,,并且想要点火
Dialogue: 0,0:01:07.34,0:01:10.93,Default,,0,0,0,,但是火柴都湿了
Dialogue: 0,0:01:10.93,0:01:14.03,Default,,0,0,0,,也许他会很慌乱并说
Dialogue: 0,0:01:14.03,0:01:17.25,Default,,0,0,0,,我的火柴湿了 点不着火了
Dialogue: 0,0:01:17.25,0:01:20.68,Default,,0,0,0,,但他做的却是拿出一部手机
Dialogue: 0,0:01:20.68,0:01:23.84,Default,,0,0,0,,用他的刀
Dialogue: 0,0:01:23.84,0:01:27.86,Default,,0,0,0,,把电池从上面拆了下来 并打开了电池
Dialogue: 0,0:01:27.86,0:01:30.86,Default,,0,0,0,,之后电池开始燃烧
Dialogue: 0,0:01:30.86,0:01:35.22,Default,,0,0,0,,他就用这个点着了火
Dialogue: 0,0:01:35.22,0:01:38.38,Default,,0,0,0,,这也是我想在这门课中教给你的态度
Dialogue: 0,0:01:38.38,0:01:42.53,Default,,0,0,0,,当我们用 Haskell 学习函数式程序设计时
Dialogue: 0,0:01:42.53,0:01:44.15,Default,,0,0,0,,Haskell 是我们的火柴
Dialogue: 0,0:01:44.15,0:01:47.86,Default,,0,0,0,,在实际工作中 你可能没有火柴能用
Dialogue: 0,0:01:47.86,0:01:52.95,Default,,0,0,0,,但你仍然可以进行函数式编程 有时你需要拆开你的手机
Dialogue: 0,0:01:52.95,0:01:58.32,Default,,0,0,0,,打开你的电池才能生火 别认为这只是关于
Dialogue: 0,0:01:58.32,0:02:02.03,Default,,0,0,0,,Haskell 的 我们用是 Haskell 但教的是函数式程序设计
Dialogue: 0,0:02:02.03,0:02:09.86,Default,,0,0,0,,好了 现在让我们开始吧
Dialogue: 0,0:02:09.86,0:02:13.09,Default,,0,0,0,,我们要解决的是什么问题？
Dialogue: 0,0:02:13.09,0:02:17.00,Default,,0,0,0,,要解决的问题就是所谓的 软件危机
Dialogue: 0,0:02:17.00,0:02:21.09,Default,,0,0,0,,我们都知道开发者写代码十分困难
Dialogue: 0,0:02:21.09,0:02:24.18,Default,,0,0,0,,我们需要写大型的程序
Dialogue: 0,0:02:24.18,0:02:28.50,Default,,0,0,0,,同时又要缩减开发时间 降低开发成本
Dialogue: 0,0:02:28.50,0:02:32.83,Default,,0,0,0,,我们希望快速发布软件
Dialogue: 0,0:02:32.83,0:02:37.20,Default,,0,0,0,,又希望发布的软件正确无误
Dialogue: 0,0:02:37.20,0:02:40.44,Default,,0,0,0,,问题是我们如何写程序
Dialogue: 0,0:02:40.44,0:02:44.26,Default,,0,0,0,,来保证我们有信心认为软件正确工作呢？
Dialogue: 0,0:02:44.26,0:02:47.60,Default,,0,0,0,,我们又如何写代码
Dialogue: 0,0:02:47.60,0:02:50.95,Default,,0,0,0,,来实现快速发布
Dialogue: 0,0:02:50.95,0:02:54.37,Default,,0,0,0,,不是几年后才发布
Dialogue: 0,0:02:54.37,0:03:00.97,Default,,0,0,0,,而是几个月或者更短 一种现代编程语言中
Dialogue: 0,0:03:00.97,0:03:06.26,Default,,0,0,0,,常见的实现方式是 为编程语言增加特性
Dialogue: 0,0:03:06.26,0:03:12.22,Default,,0,0,0,,允许程序的表达方式简洁清晰 抽象层次也较高
Dialogue: 0,0:03:12.22,0:03:16.31,Default,,0,0,0,,我们在现代编程语言中使用的这些技术
Dialogue: 0,0:03:16.31,0:03:19.88,Default,,0,0,0,,都是基于函数式程序设计
Dialogue: 0,0:03:19.88,0:03:23.98,Default,,0,0,0,,基于 lambda 演算的概念
Dialogue: 0,0:03:23.98,0:03:30.66,Default,,0,0,0,,Haskell 是一种纯函数式编程语言
Dialogue: 0,0:03:30.66,0:03:34.66,Default,,0,0,0,,因此适用于这些概念的教学
Dialogue: 0,0:03:34.66,0:03:42.79,Default,,0,0,0,,函数式编程语言则提供一种十分优雅的框架
Dialogue: 0,0:03:42.79,0:03:46.12,Default,,0,0,0,,让我们在一个较高的抽象层次写代码
Dialogue: 0,0:03:46.12,0:03:50.13,Default,,0,0,0,,但正如我说过的 Haskell 只是一个工具
Dialogue: 0,0:03:50.13,0:03:55.32,Default,,0,0,0,,我们在这门课中所学到的东西
Dialogue: 0,0:03:55.32,0:03:59.16,Default,,0,0,0,,你可以用于任何编程语言 即使你用的是汇编语言
Dialogue: 0,0:03:59.16,0:04:06.48,Default,,0,0,0,,Java 或 PHP 或者 JavaScript 你在这里学习到的想法
Dialogue: 0,0:04:06.48,0:04:09.72,Default,,0,0,0,,可以立刻用在
Dialogue: 0,0:04:09.72,0:04:13.15,Default,,0,0,0,,无论你用的哪种编程语言中
Dialogue: 0,0:04:13.15,0:04:16.93,Default,,0,0,0,,那么什么是函数式编程语言呢？
Dialogue: 0,0:04:16.93,0:04:20.70,Default,,0,0,0,,可能的回答有很多
Dialogue: 0,0:04:20.70,0:04:24.96,Default,,0,0,0,,现在还没有明确的定义
Dialogue: 0,0:04:24.96,0:04:28.74,Default,,0,0,0,,如果我们考虑最纯的函数式编程语言
Dialogue: 0,0:04:28.74,0:04:32.80,Default,,0,0,0,,那么函数式编程语言就是使用数学函数编程的语言
Dialogue: 0,0:04:32.80,0:04:38.83,Default,,0,0,0,,这一定义适用于 Haskell 它本身是一门 纯函数式语言
Dialogue: 0,0:04:38.83,0:04:42.32,Default,,0,0,0,,在函数式语言中仅有很少几门是纯的
Dialogue: 0,0:04:42.32,0:04:47.67,Default,,0,0,0,,当然 我在说我们可以将这些技术应用到其他编程语言中 的时候
Dialogue: 0,0:04:47.67,0:04:52.02,Default,,0,0,0,,我们不能使用这个定义
Dialogue: 0,0:04:52.02,0:04:56.02,Default,,0,0,0,,我们要用的时下面的定义
Dialogue: 0,0:04:56.02,0:04:56.93,Default,,0,0,0,,函数式编程语言
Dialogue: 0,0:04:56.93,0:05:00.90,Default,,0,0,0,,是一种编程的风格
Dialogue: 0,0:05:00.90,0:05:04.31,Default,,0,0,0,,其中表达式比语句更为重要
Dialogue: 0,0:05:04.31,0:05:09.00,Default,,0,0,0,,我们想做的事情时用表达式组成程序
Dialogue: 0,0:05:09.00,0:05:14.53,Default,,0,0,0,,这些表达式都可以求值 因此我们可以把两个可以求值的表达式
Dialogue: 0,0:05:14.53,0:05:18.62,Default,,0,0,0,,组合起来成为一个更大的表达式
Dialogue: 0,0:05:18.62,0:05:23.78,Default,,0,0,0,,比较一下使用语句编程
Dialogue: 0,0:05:23.78,0:05:28.04,Default,,0,0,0,,当你将语句组合起来的时候 每条语句都有隐藏的副作用
Dialogue: 0,0:05:28.04,0:05:32.41,Default,,0,0,0,,这些副作用影响全局状态 它们通过全局状态实现通信
Dialogue: 0,0:05:32.88,0:05:36.00,Default,,0,0,0,,而使用表达式编程时
Dialogue: 0,0:05:36.00,0:05:40.62,Default,,0,0,0,,表达式返回一个值
Dialogue: 0,0:05:40.62,0:05:46.32,Default,,0,0,0,,我们直接将值组合起来 一门函数式编程语言
Dialogue: 0,0:05:46.32,0:05:50.19,Default,,0,0,0,,就是支持并且鼓励
Dialogue: 0,0:05:50.19,0:05:53.41,Default,,0,0,0,,使用表达式编程的语言
Dialogue: 0,0:05:53.41,0:06:01.24,Default,,0,0,0,,正如我说过的 大部分现代语言都支持这种风格
Dialogue: 0,0:06:01.24,0:06:04.85,Default,,0,0,0,,特别时通过支持 lambda 表达式来实现这一点
Dialogue: 0,0:06:04.85,0:06:08.83,Default,,0,0,0,,随着课程的进行 我们可以在很多语言中
Dialogue: 0,0:06:08.83,0:06:11.96,Default,,0,0,0,,看到函数式编程的例子
Dialogue: 0,0:06:11.96,0:06:19.19,Default,,0,0,0,,让我们从第一段代码开始吧
Dialogue: 0,0:06:19.19,0:06:22.44,Default,,0,0,0,,这是一种传统 Java 编程风格
Dialogue: 0,0:06:22.44,0:06:27.07,Default,,0,0,0,,我们要计算 1 到 10 的加和
Dialogue: 0,0:06:27.07,0:06:31.25,Default,,0,0,0,,我们做的方式 使用传统的过程式编程风格
Dialogue: 0,0:06:31.25,0:06:33.82,Default,,0,0,0,,它是基于语句的
Dialogue: 0,0:06:33.82,0:06:38.53,Default,,0,0,0,,我们做的第一件事是声明了一个整数类型的
Dialogue: 0,0:06:38.53,0:06:41.92,Default,,0,0,0,,变量 total 并将它初始化为 0
Dialogue: 0,0:06:41.92,0:06:46.38,Default,,0,0,0,,接下来我们用一个循环变量写一个 for 循环
Dialogue: 0,0:06:46.38,0:06:49.66,Default,,0,0,0,,你可以看到这边的变量 i
Dialogue: 0,0:06:49.66,0:06:53.53,Default,,0,0,0,,然后我们给 total 变量赋值
Dialogue: 0,0:06:53.53,0:06:57.10,Default,,0,0,0,,成为 total + i 你可以看到
Dialogue: 0,0:06:57.10,0:07:00.24,Default,,0,0,0,,这个程序是用一种
Dialogue: 0,0:07:00.24,0:07:03.86,Default,,0,0,0,,过程式的风格写的 我们有语句
Dialogue: 0,0:07:03.86,0:07:06.99,Default,,0,0,0,,我们有可变状态
Dialogue: 0,0:07:06.99,0:07:10.66,Default,,0,0,0,,我们过程式地执行一条语句接一条语句
Dialogue: 0,0:07:10.66,0:07:14.16,Default,,0,0,0,,更新状态来计算最终结果
Dialogue: 0,0:07:14.16,0:07:18.71,Default,,0,0,0,,这是你用 Haskell 编写相同程序的方法
Dialogue: 0,0:07:18.71,0:07:21.98,Default,,0,0,0,,你首先能看到的是
Dialogue: 0,0:07:21.98,0:07:26.98,Default,,0,0,0,,程序更加简洁 此外 没有语句了
Dialogue: 0,0:07:26.98,0:07:30.23,Default,,0,0,0,,只有两个表达式
Dialogue: 0,0:07:30.23,0:07:36.74,Default,,0,0,0,,右面这个 1 点点 10 （1..10）
Dialogue: 0,0:07:36.74,0:07:40.30,Default,,0,0,0,,创建了一个从 1 到 10 的整数列表
Dialogue: 0,0:07:40.30,0:07:43.92,Default,,0,0,0,,然后我们将这些整数相加
Dialogue: 0,0:07:43.92,0:07:47.38,Default,,0,0,0,,你可以看到我们将表达式
Dialogue: 0,0:07:47.38,0:07:52.67,Default,,0,0,0,,组合成为程序 一个表达式创建从 1 到 10 的列表
Dialogue: 0,0:07:52.67,0:07:56.60,Default,,0,0,0,,我们将它的返回值传给
Dialogue: 0,0:07:56.60,0:07:59.68,Default,,0,0,0,,sum 函数上 从而把内容求和
Dialogue: 0,0:07:59.68,0:08:03.08,Default,,0,0,0,,在 Java 8 中
Dialogue: 0,0:08:03.08,0:08:06.67,Default,,0,0,0,,你可以用 Java 8 的流（streams）
Dialogue: 0,0:08:06.67,0:08:10.04,Default,,0,0,0,,写同样的程序
Dialogue: 0,0:08:10.04,0:08:14.07,Default,,0,0,0,,我们将在未来的课程中深入探讨 Java 8
Dialogue: 0,0:08:14.07,0:08:17.59,Default,,0,0,0,,但现在我们只看用 Haskell 实现的方式
Dialogue: 0,0:08:17.59,0:08:21.99,Default,,0,0,0,,十分感谢
Dialogue: 0,0:08:21.99,0:08:24.59,Default,,0,0,0,,第二部分再见
