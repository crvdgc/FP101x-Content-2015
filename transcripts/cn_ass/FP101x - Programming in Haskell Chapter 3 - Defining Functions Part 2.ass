[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]
Scroll Position: 69
Active Line: 85

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.51,0:00:03.12,Default,,0,0,0,,欢迎回来
Dialogue: 0,0:00:03.12,0:00:06.15,Default,,0,0,0,,这节课的第一部分中
Dialogue: 0,0:00:06.15,0:00:16.57,Default,,0,0,0,,我们已经看了在 Haskell 中定义函数的简单例子以及和其他语言的区别
Dialogue: 0,0:00:16.57,0:00:21.60,Default,,0,0,0,,Haskell 中的条件是表达式而非语句
Dialogue: 0,0:00:21.60,0:00:28.84,Default,,0,0,0,,但 Haskell 程序员更常用的是守卫等式 而非条件表达式
Dialogue: 0,0:00:28.84,0:00:35.94,Default,,0,0,0,,另一项内容是如何使用模式匹配定义函数
Dialogue: 0,0:00:35.94,0:00:40.95,Default,,0,0,0,,特别是使用模式匹配 来定义列表上的函数
Dialogue: 0,0:00:40.95,0:00:49.45,Default,,0,0,0,,下面要讲的是如何直接定义函数 因为 Haskell 是一门函数式语言
Dialogue: 0,0:00:49.45,0:00:56.25,Default,,0,0,0,,需要有一种简洁的方式定义函数 那就是 lambda 表达式
Dialogue: 0,0:00:56.25,0:01:05.04,Default,,0,0,0,,你或许知道其他语言中的 lambda 表达式
Dialogue: 0,0:01:05.04,0:01:09.45,Default,,0,0,0,,如果你是 Java 程序员的话 Java 8 中引入了 lambda 表达式
Dialogue: 0,0:01:09.45,0:01:13.00,Default,,0,0,0,,如果你是 C# 程序员的话 你一定知道 lambda 表达式
Dialogue: 0,0:01:13.00,0:01:16.03,Default,,0,0,0,,如果你是 Hack 或 PHP 程序员的话
Dialogue: 0,0:01:16.03,0:01:20.83,Default,,0,0,0,,里面都有 lambda 表达式 在 JavaScript 中同样也有
Dialogue: 0,0:01:20.83,0:01:31.22,Default,,0,0,0,,lambda 表达式无处不在 随便举出什么语言 C++ D Swift 每门现代编程语言都有
Dialogue: 0,0:01:31.22,0:01:38.64,Default,,0,0,0,,在第一节课中讲到过 它是20世纪30年代阿隆佐·丘奇（Alonzo Church ）发明的
Dialogue: 0,0:01:38.64,0:01:41.88,Default,,0,0,0,,大多数语言中的 lambda 表达式都很相似
Dialogue: 0,0:01:41.88,0:01:48.43,Default,,0,0,0,,在 Haskell 中 它是这样的
Dialogue: 0,0:01:48.43,0:01:52.75,Default,,0,0,0,,lambda x 箭头 接下来是函数体
Dialogue: 0,0:01:52.75,0:01:56.82,Default,,0,0,0,,实际的代码中不写 lambda 字母（λ）
Dialogue: 0,0:01:56.82,0:02:00.06,Default,,0,0,0,,而写斜线（slash）比如 \x
Dialogue: 0,0:02:00.06,0:02:03.45,Default,,0,0,0,,不写箭头符号（→）
Dialogue: 0,0:02:03.45,0:02:08.61,Default,,0,0,0,,而写 -> 但在课件中为了美观
Dialogue: 0,0:02:08.61,0:02:13.74,Default,,0,0,0,,写的是 lambda 字母和真正的箭头符号
Dialogue: 0,0:02:13.74,0:02:17.31,Default,,0,0,0,,但当你在写代码时 需要用斜线代替 lambda
Dialogue: 0,0:02:17.31,0:02:24.89,Default,,0,0,0,,用讲过的那种方式写箭头 那么它到底是什么
Dialogue: 0,0:02:24.89,0:02:28.92,Default,,0,0,0,,这是一个函数 接收 x 并把它加到自身上
Dialogue: 0,0:02:28.92,0:02:33.58,Default,,0,0,0,,这一函数没有名字 因此是一个函数类型的表达式
Dialogue: 0,0:02:33.58,0:02:36.69,Default,,0,0,0,,这就是 lambda 表达式的本质
Dialogue: 0,0:02:36.69,0:02:43.37,Default,,0,0,0,,也就是表示函数的表达式
Dialogue: 0,0:02:43.37,0:02:50.42,Default,,0,0,0,,在数学中 按丘奇的设计
Dialogue: 0,0:02:50.42,0:02:54.93,Default,,0,0,0,,读 lambda 代数文献时会看到 写成 lambda 字母 但打字时写成斜线
Dialogue: 0,0:02:54.93,0:03:02.37,Default,,0,0,0,,不写数学中的箭头（↦） 而写这样的箭头（→）
Dialogue: 0,0:03:02.37,0:03:08.40,Default,,0,0,0,,但就其他方面而言 Haskell 是最接近 lambda 代数的语言
Dialogue: 0,0:03:08.40,0:03:11.89,Default,,0,0,0,,因为它是基于纯函数的（pure functions）
Dialogue: 0,0:03:11.89,0:03:19.26,Default,,0,0,0,,而其他语言中的 lambda 表达式称为闭包（clojure）更准确一些
Dialogue: 0,0:03:19.26,0:03:23.13,Default,,0,0,0,,之后可以看到原因 它们可以“封闭”外部变量
Dialogue: 0,0:03:23.13,0:03:28.25,Default,,0,0,0,,但是那些 lambda 表达式可以有副作用
Dialogue: 0,0:03:28.25,0:03:31.38,Default,,0,0,0,,但我们之前说过 其实不要紧
Dialogue: 0,0:03:31.38,0:03:36.42,Default,,0,0,0,,我们强调的是 函数式编程是使用表达式进行编程
Dialogue: 0,0:03:36.42,0:03:42.29,Default,,0,0,0,,lambda 表达式有什么用呢
Dialogue: 0,0:03:42.29,0:03:54.45,Default,,0,0,0,,它可以让你更好地表达函数柯里化（currying）的意图
Dialogue: 0,0:03:54.45,0:03:58.25,Default,,0,0,0,,第一个例子中 不写 add x y = x+y
Dialogue: 0,0:03:58.25,0:04:01.95,Default,,0,0,0,,这是一个柯里化的定义
Dialogue: 0,0:04:01.95,0:04:05.60,Default,,0,0,0,,这个函数接收一个参数 x
Dialogue: 0,0:04:05.60,0:04:08.78,Default,,0,0,0,,返回一个函数 接收参数 y
Dialogue: 0,0:04:08.78,0:04:12.51,Default,,0,0,0,,最终返回 x 加 y
Dialogue: 0,0:04:12.51,0:04:16.16,Default,,0,0,0,,实际上这样表达 意图就更清晰了
Dialogue: 0,0:04:16.16,0:04:19.32,Default,,0,0,0,,add 是一个函数
Dialogue: 0,0:04:19.32,0:04:24.63,Default,,0,0,0,,接收参数 x 返回一个接收参数 y 的函数
Dialogue: 0,0:04:24.63,0:04:27.75,Default,,0,0,0,,最终将它们加起来
Dialogue: 0,0:04:27.75,0:04:30.83,Default,,0,0,0,,上面实际上是下面形式的一种语法糖（syntactic sugar）
Dialogue: 0,0:04:30.83,0:04:35.66,Default,,0,0,0,,当写 Haskell 时 我总是写下面这种形式
Dialogue: 0,0:04:35.66,0:04:38.88,Default,,0,0,0,,尽管更长一点
Dialogue: 0,0:04:38.88,0:04:42.47,Default,,0,0,0,,也就是说要打更多的字
Dialogue: 0,0:04:42.47,0:04:46.68,Default,,0,0,0,,但我认为这种形式可读性更好
Dialogue: 0,0:04:46.68,0:04:53.86,Default,,0,0,0,,在课程当中 我们会交替使用两种形式
Dialogue: 0,0:04:53.86,0:05:09.59,Default,,0,0,0,,但当你看我的 Haskell 代码时 我倾向于显式地写出 lambda 来更好地表达函数柯里化
Dialogue: 0,0:05:09.59,0:05:17.11,Default,,0,0,0,,当希望明确表示返回值是一个函数时 也可以用到 lambda 表达式
Dialogue: 0,0:05:17.11,0:05:24.53,Default,,0,0,0,,某种意义上说 和柯里化类似 这里定义常数函数
Dialogue: 0,0:05:24.53,0:05:29.71,Default,,0,0,0,,这是一个函数 给定 a 就会返回一个函数
Dialogue: 0,0:05:29.71,0:05:34.49,Default,,0,0,0,,返回的函数无论接收什么参数 b 都会返回 a 类型 定义如下 const x
Dialogue: 0,0:05:34.49,0:05:39.38,Default,,0,0,0,,返回一个函数 无论接收什么参数 都忽略
Dialogue: 0,0:05:39.38,0:05:43.99,Default,,0,0,0,,并且返回 x 因此常数函数
Dialogue: 0,0:05:43.99,0:05:47.66,Default,,0,0,0,,可以用一个 lambda 表达式十分简洁地定义
Dialogue: 0,0:05:47.66,0:05:53.94,Default,,0,0,0,,这种形式就不那么清晰 const x _ = x
Dialogue: 0,0:05:53.94,0:05:58.02,Default,,0,0,0,,它没有强调返回的是一个函数
Dialogue: 0,0:05:58.02,0:06:06.30,Default,,0,0,0,,下面在类型上也用括号进行强调 而在上面就没有
Dialogue: 0,0:06:06.30,0:06:18.09,Default,,0,0,0,,我会用下面这种方式写 我会在类型上加上括号 并且将函数写成 lambda 表达式
Dialogue: 0,0:06:18.09,0:06:25.53,Default,,0,0,0,,下面是另一个 lambda 表达式的用处 避免起名
Dialogue: 0,0:06:25.53,0:06:32.25,Default,,0,0,0,,起名时编程中最难的事情之一
Dialogue: 0,0:06:32.25,0:06:42.99,Default,,0,0,0,,需要起有意义的名字 因为语言常常强迫你起名 而有时并不想起名 只想直接传值
Dialogue: 0,0:06:42.99,0:06:46.33,Default,,0,0,0,,比如如果将一个函数 map 到一个列表上
Dialogue: 0,0:06:46.33,0:06:50.53,Default,,0,0,0,,我没有理由给这个函数起名为 f
Dialogue: 0,0:06:50.53,0:06:54.52,Default,,0,0,0,,f 本身又传达了什么意义呢
Dialogue: 0,0:06:54.52,0:07:07.68,Default,,0,0,0,,相反 我可以只传入一个 lambda 表达式来 map 整个列表
Dialogue: 0,0:07:07.68,0:07:15.27,Default,,0,0,0,,上面这种不是地道的 Haskell 下面这种才是
Dialogue: 0,0:07:15.27,0:07:19.97,Default,,0,0,0,,需要起名的唯一情况 就是要多次使用
Dialogue: 0,0:07:19.97,0:07:28.83,Default,,0,0,0,,或者是让事情更清楚 但这种情况也因人而异
Dialogue: 0,0:07:28.83,0:07:32.88,Default,,0,0,0,,下面介绍 Haskell 的另一个特点 叫做分部（sections）
Dialogue: 0,0:07:32.88,0:07:43.08,Default,,0,0,0,,通过分部 可以将一个中缀的二元运算符 比如 加运算符 当作函数使用
Dialogue: 0,0:07:43.08,0:07:47.58,Default,,0,0,0,,通过在周围加上括号 就可以当作函数使用 比如 1+2 结果是 3
Dialogue: 0,0:07:47.58,0:07:56.59,Default,,0,0,0,,括号+ 接着 1 2 同样是 3 这是一个有用的技巧
Dialogue: 0,0:07:56.59,0:08:08.46,Default,,0,0,0,,因为可以同样使用分部写 (1+) 以及 (+2)
Dialogue: 0,0:08:08.46,0:08:15.18,Default,,0,0,0,,通过在加号周围加上括号 可以部分应用加法
Dialogue: 0,0:08:15.18,0:08:22.02,Default,,0,0,0,,可以写 (1+) 它是个函数 需要接收第二个参数并加 1
Dialogue: 0,0:08:22.02,0:08:33.47,Default,,0,0,0,,这个 (+2) 的分部是需要接收一个值 在上面加上 2
Dialogue: 0,0:08:33.47,0:08:37.82,Default,,0,0,0,,因此最终都是 1+2 结果是 3
Dialogue: 0,0:08:37.82,0:08:50.12,Default,,0,0,0,, 一般而言 如果 ⊕ 是一个二元运算符 可以用  (⊕) 将其当作一个正常函数使用
Dialogue: 0,0:08:53.18,0:08:56.38,Default,,0,0,0,,可以使用左右分部来部分应用这个函数
Dialogue: 0,0:08:56.38,0:09:00.50,Default,,0,0,0,,这点会在 Haskell 中经常见到
Dialogue: 0,0:09:00.50,0:09:04.75,Default,,0,0,0,,比如这里 如果想写一个增加1的函数
Dialogue: 0,0:09:04.75,0:09:11.02,Default,,0,0,0,,可以直接写 (1+) 分部有什么用呢
Dialogue: 0,0:09:11.02,0:09:18.05,Default,,0,0,0,,下面是几个例子 要写一个将参数值折半的函数
Dialogue: 0,0:09:18.05,0:09:21.99,Default,,0,0,0,,只需要写 (/2) 就可以了
Dialogue: 0,0:09:21.99,0:09:32.99,Default,,0,0,0,,而不用写 \x -> x / 2 因此分部可以让写代码时不用起名
Dialogue: 0,0:09:32.99,0:09:36.36,Default,,0,0,0,,这就是练习中要表达的
Dialogue: 0,0:09:36.36,0:09:39.74,Default,,0,0,0,,起名很难 希望避免它
Dialogue: 0,0:09:39.74,0:09:44.64,Default,,0,0,0,,分部可以帮你做到
Dialogue: 0,0:09:44.64,0:09:52.64,Default,,0,0,0,,下面是练习的预览 可以在课程网站上找到习题
Dialogue: 0,0:09:52.64,0:10:03.41,Default,,0,0,0,,练习中 需要使用这节课中教授的结构来定义函数
Dialogue: 0,0:10:03.41,0:10:10.86,Default,,0,0,0,,我保证 这是最后一个特定于 Haskell 的练习了
Dialogue: 0,0:10:10.86,0:10:18.68,Default,,0,0,0,,但既然一直在讲 Haskell 和其他语言如何不同
Dialogue: 0,0:10:18.68,0:10:26.80,Default,,0,0,0,,我想通过做练习熟悉 Haskell 语法 对听课很有用
Dialogue: 0,0:10:26.80,0:10:31.11,Default,,0,0,0,,各位 Hacking 愉快
Dialogue: 0,0:10:31.11,0:10:33.68,Default,,0,0,0,,下周再见 拜拜
