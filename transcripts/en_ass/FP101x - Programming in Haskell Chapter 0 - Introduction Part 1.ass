[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.52,0:00:03.56,Default,,0,0,0,,Welcome everybody, to the
Dialogue: 0,0:00:03.56,0:00:08.84,Default,,0,0,0,,FP101x functional programming MOOC.\NI'm really happy that we can do this one
Dialogue: 0,0:00:08.84,0:00:12.82,Default,,0,0,0,,as a MOOC with exercises and\Neverything.
Dialogue: 0,0:00:12.82,0:00:17.82,Default,,0,0,0,,Let's get started
Dialogue: 0,0:00:17.82,0:00:23.48,Default,,0,0,0,,immediately. One thing that I wanted\Nto tell you before we get going
Dialogue: 0,0:00:23.48,0:00:28.16,Default,,0,0,0,,is that this is a MOOC about functional\Nprogramming that's what the title says
Dialogue: 0,0:00:28.16,0:00:33.09,Default,,0,0,0,,FP101 functional programming. This is\Nnot a course on Haskell, were using
Dialogue: 0,0:00:33.09,0:00:33.92,Default,,0,0,0,,Haskell
Dialogue: 0,0:00:33.92,0:00:39.37,Default,,0,0,0,,as a functional language but we're not\Nlearning to program Haskell per se.
Dialogue: 0,0:00:39.37,0:00:42.46,Default,,0,0,0,,Let me tell you a little bit\Nof a story.
Dialogue: 0,0:00:42.46,0:00:46.00,Default,,0,0,0,,I travel a lot, going to conferences,
Dialogue: 0,0:00:46.00,0:00:49.20,Default,,0,0,0,,giving courses et cetera
Dialogue: 0,0:00:49.20,0:00:52.98,Default,,0,0,0,,and during those travels I have ample\Ntime to watch TV.
Dialogue: 0,0:00:52.98,0:00:57.52,Default,,0,0,0,,One night I was zapping through the channels
Dialogue: 0,0:00:57.52,0:01:00.77,Default,,0,0,0,,and there was one of those survival\Nshows
Dialogue: 0,0:01:00.77,0:01:03.96,Default,,0,0,0,,where this guy was trying to make up
Dialogue: 0,0:01:03.96,0:01:07.34,Default,,0,0,0,,camp at night and trying to make a fire
Dialogue: 0,0:01:07.34,0:01:10.93,Default,,0,0,0,,but his matches were wet.
Dialogue: 0,0:01:10.93,0:01:14.03,Default,,0,0,0,,He could have gotten in panic and said:
Dialogue: 0,0:01:14.03,0:01:17.25,Default,,0,0,0,,my matches are wet I cannot make a fire.
Dialogue: 0,0:01:17.25,0:01:20.68,Default,,0,0,0,,What he did instead is he took a\Ncell phone
Dialogue: 0,0:01:20.68,0:01:23.84,Default,,0,0,0,,and his knife and he
Dialogue: 0,0:01:23.84,0:01:27.86,Default,,0,0,0,,took the battery out of his cell phone,\Nopened the battery
Dialogue: 0,0:01:27.86,0:01:30.86,Default,,0,0,0,,and then the battery started to combust.
Dialogue: 0,0:01:30.86,0:01:35.22,Default,,0,0,0,,That's what he used to start a fire.\NAnd this is the same
Dialogue: 0,0:01:35.22,0:01:38.38,Default,,0,0,0,,attitude that I want to teach you in\Nthis course.
Dialogue: 0,0:01:38.38,0:01:42.53,Default,,0,0,0,,While we're learning to do\Nfunctional programming using Haskell so
Dialogue: 0,0:01:42.53,0:01:44.15,Default,,0,0,0,,Haskell's our matches,
Dialogue: 0,0:01:44.15,0:01:47.86,Default,,0,0,0,,when at work you don't have matches\Navailable
Dialogue: 0,0:01:47.86,0:01:52.04,Default,,0,0,0,,you still can do functional programming.\NSometimes you have to smash your
Dialogue: 0,0:01:52.04,0:01:52.95,Default,,0,0,0,,cell phone
Dialogue: 0,0:01:52.95,0:01:58.32,Default,,0,0,0,,and open your battery to start a fire.\NDon't think that this is about
Dialogue: 0,0:01:58.32,0:02:02.03,Default,,0,0,0,,Haskell per se, we're going to teach\Nfunctional programming
Dialogue: 0,0:02:02.03,0:02:06.29,Default,,0,0,0,,using Haskell.\NAlright, let's get
Dialogue: 0,0:02:06.29,0:02:09.86,Default,,0,0,0,,started then.
Dialogue: 0,0:02:09.86,0:02:13.09,Default,,0,0,0,,What's the problem that we're trying to\Nsolve? The problem
Dialogue: 0,0:02:13.09,0:02:17.00,Default,,0,0,0,,is the so called software crisis.\NWe all know
Dialogue: 0,0:02:17.00,0:02:21.09,Default,,0,0,0,,as developers that writing code is\Npretty difficult.
Dialogue: 0,0:02:21.09,0:02:24.18,Default,,0,0,0,,We're writing huge programs and
Dialogue: 0,0:02:24.18,0:02:28.50,Default,,0,0,0,,what we need to do is to reduce the\Ntime
Dialogue: 0,0:02:28.50,0:02:32.83,Default,,0,0,0,,and the cost of development.\NWe want to deliver software fast
Dialogue: 0,0:02:32.83,0:02:37.20,Default,,0,0,0,,and we want to deliver correct software.\NThe question is
Dialogue: 0,0:02:37.20,0:02:40.44,Default,,0,0,0,,how can we make programs
Dialogue: 0,0:02:40.44,0:02:44.26,Default,,0,0,0,,such that that we are confident that our\Nprograms work
Dialogue: 0,0:02:44.26,0:02:47.60,Default,,0,0,0,,and how can we make code
Dialogue: 0,0:02:47.60,0:02:50.95,Default,,0,0,0,,such that this code is delivered fast.
Dialogue: 0,0:02:50.95,0:02:54.37,Default,,0,0,0,,It doesn't take years to deliver but\Nit takes
Dialogue: 0,0:02:54.37,0:03:00.97,Default,,0,0,0,,months or as long as it needs to be.\NOne way to do that, and we see this now
Dialogue: 0,0:03:00.97,0:03:06.26,Default,,0,0,0,,in all modern programming languages, is to\Nadd features to our languages
Dialogue: 0,0:03:06.26,0:03:11.31,Default,,0,0,0,,that allow programs to be written\Nclearly concisely and at a high level of
Dialogue: 0,0:03:11.31,0:03:12.22,Default,,0,0,0,,abstraction.
Dialogue: 0,0:03:12.22,0:03:16.31,Default,,0,0,0,,And the techniques that we use in these\Nmodern languages
Dialogue: 0,0:03:16.31,0:03:19.88,Default,,0,0,0,,are all based on functional programming.\NThese techniques
Dialogue: 0,0:03:19.88,0:03:23.98,Default,,0,0,0,,are all based on concepts from the\Nlambda calculus.
Dialogue: 0,0:03:23.98,0:03:27.41,Default,,0,0,0,,And Haskell is a
Dialogue: 0,0:03:27.41,0:03:30.66,Default,,0,0,0,,functional language that is pure and\Ntherefore
Dialogue: 0,0:03:30.66,0:03:34.66,Default,,0,0,0,,a really good vehicle to teach these\Nconcept.
Dialogue: 0,0:03:34.66,0:03:39.01,Default,,0,0,0,,Functional languages
Dialogue: 0,0:03:39.01,0:03:42.79,Default,,0,0,0,,therefore provide a very elegant framework
Dialogue: 0,0:03:42.79,0:03:46.12,Default,,0,0,0,,to write code at a high level of\Nabstraction.
Dialogue: 0,0:03:46.12,0:03:50.13,Default,,0,0,0,,But as I said, Haskell is just our\Nvehicle.
Dialogue: 0,0:03:50.13,0:03:55.32,Default,,0,0,0,,What we learn in this course, you\Nwill be able to apply this
Dialogue: 0,0:03:55.32,0:03:59.16,Default,,0,0,0,,to any language even if you're programming\Nin assembly
Dialogue: 0,0:03:59.16,0:04:02.59,Default,,0,0,0,,or in Java or in PHP
Dialogue: 0,0:04:02.59,0:04:06.48,Default,,0,0,0,,or in JavaScript, all the ideas that you\Nwill learn here
Dialogue: 0,0:04:06.48,0:04:09.72,Default,,0,0,0,,you can apply immediately
Dialogue: 0,0:04:09.72,0:04:13.15,Default,,0,0,0,,in whatever language you're happening\Nto use.
Dialogue: 0,0:04:13.15,0:04:16.93,Default,,0,0,0,,What is a functional programming\Nlanguage?
Dialogue: 0,0:04:16.93,0:04:20.70,Default,,0,0,0,,The ideas about that
Dialogue: 0,0:04:20.70,0:04:24.96,Default,,0,0,0,,vary, there's no real clear\Ndefinition.
Dialogue: 0,0:04:24.96,0:04:28.74,Default,,0,0,0,,If we take a very purist approach a\Nfunctional language
Dialogue: 0,0:04:28.74,0:04:32.80,Default,,0,0,0,,is a language in which we program using\Nmathematical functions.
Dialogue: 0,0:04:32.80,0:04:37.98,Default,,0,0,0,,And that definition applies to Haskell,\Nwhich is a pure language, one of the very
Dialogue: 0,0:04:37.98,0:04:38.83,Default,,0,0,0,,few
Dialogue: 0,0:04:38.83,0:04:42.32,Default,,0,0,0,,functional programming languages that is\Npure. But of course
Dialogue: 0,0:04:42.32,0:04:46.86,Default,,0,0,0,,and when I say that we can use these\Ntechniques to program also in other
Dialogue: 0,0:04:46.86,0:04:47.67,Default,,0,0,0,,languages
Dialogue: 0,0:04:47.67,0:04:52.02,Default,,0,0,0,,we cannot use that definition.
Dialogue: 0,0:04:52.02,0:04:56.02,Default,,0,0,0,,What will use in this course is the\Nfollowing definition:
Dialogue: 0,0:04:56.02,0:04:56.93,Default,,0,0,0,,functional programming
Dialogue: 0,0:04:56.93,0:05:00.90,Default,,0,0,0,,is a style of programming in which
Dialogue: 0,0:05:00.90,0:05:04.31,Default,,0,0,0,,expressions are more important than\Nusing statements.
Dialogue: 0,0:05:04.31,0:05:09.00,Default,,0,0,0,,What we want to do is: we want to\Ncompose programs using expressions
Dialogue: 0,0:05:09.00,0:05:13.80,Default,,0,0,0,,and these expressions deliver a value so\Nwe take two expressions that deliver a
Dialogue: 0,0:05:13.80,0:05:14.53,Default,,0,0,0,,value
Dialogue: 0,0:05:14.53,0:05:18.62,Default,,0,0,0,,and compose them in a bigger expression.
Dialogue: 0,0:05:18.62,0:05:23.78,Default,,0,0,0,,Compare and contrast that with writing\Nyour program using statements.
Dialogue: 0,0:05:23.78,0:05:28.04,Default,,0,0,0,,When you compose statements the\Nstatements have an implicit side-effect
Dialogue: 0,0:05:28.04,0:05:32.41,Default,,0,0,0,,on the global state and they\Ncommunicate values via that global
Dialogue: 0,0:05:32.41,0:05:32.88,Default,,0,0,0,,state.
Dialogue: 0,0:05:32.88,0:05:36.00,Default,,0,0,0,,Whereas in an expression based
Dialogue: 0,0:05:36.00,0:05:40.62,Default,,0,0,0,,programming style expressions return\Nvalues
Dialogue: 0,0:05:40.62,0:05:46.32,Default,,0,0,0,,and we compose these values directly.\NA functional programming language
Dialogue: 0,0:05:46.32,0:05:50.19,Default,,0,0,0,,is a language that supports and\Nencourages
Dialogue: 0,0:05:50.19,0:05:53.41,Default,,0,0,0,,writing code using expressions.
Dialogue: 0,0:05:53.41,0:05:57.23,Default,,0,0,0,,As I said before, most modern\Nlanguages
Dialogue: 0,0:05:57.23,0:06:01.24,Default,,0,0,0,,now support this style.\NAnd they support the style
Dialogue: 0,0:06:01.24,0:06:04.85,Default,,0,0,0,,specifically by supporting lambda\Nexpressions.
Dialogue: 0,0:06:04.85,0:06:08.83,Default,,0,0,0,,We'll see examples of functional\Nprogramming
Dialogue: 0,0:06:08.83,0:06:11.96,Default,,0,0,0,,in many many languages as we progress
Dialogue: 0,0:06:11.96,0:06:15.43,Default,,0,0,0,,through this course. Let's
Dialogue: 0,0:06:15.43,0:06:19.19,Default,,0,0,0,,start with our first fragment of code\Nhere.
Dialogue: 0,0:06:19.19,0:06:22.44,Default,,0,0,0,,This is some old-fashioned Java
Dialogue: 0,0:06:22.44,0:06:27.07,Default,,0,0,0,,where we're computing the sum of the\Nintegers from one to ten.
Dialogue: 0,0:06:27.07,0:06:31.25,Default,,0,0,0,,The way we do that, as I said, in the\Ntraditional imperative
Dialogue: 0,0:06:31.25,0:06:33.82,Default,,0,0,0,,style, this is based by doing
Dialogue: 0,0:06:33.82,0:06:38.53,Default,,0,0,0,,statements. The first thing we do\Nis we declare a variable total
Dialogue: 0,0:06:38.53,0:06:41.92,Default,,0,0,0,,of type int. We initialize it with zero
Dialogue: 0,0:06:41.92,0:06:46.38,Default,,0,0,0,,and then we write a for loop with a\Nloop variable.
Dialogue: 0,0:06:46.38,0:06:49.66,Default,,0,0,0,,That int i, that you see there and then we
Dialogue: 0,0:06:49.66,0:06:53.53,Default,,0,0,0,,assign to that the total\Nvariable:
Dialogue: 0,0:06:53.53,0:06:57.10,Default,,0,0,0,,total variable + i. Here you see that
Dialogue: 0,0:06:57.10,0:07:00.24,Default,,0,0,0,,the program is written
Dialogue: 0,0:07:00.24,0:07:03.86,Default,,0,0,0,,in an imperative style.\NWe have statements,
Dialogue: 0,0:07:03.86,0:07:06.99,Default,,0,0,0,,we have mutable state and we
Dialogue: 0,0:07:06.99,0:07:10.66,Default,,0,0,0,,imperatively execute statement after\Nstatement
Dialogue: 0,0:07:10.66,0:07:14.16,Default,,0,0,0,,updating the state to compute the result.
Dialogue: 0,0:07:14.16,0:07:18.71,Default,,0,0,0,,Now here is how you would write that same\Nprogram
Dialogue: 0,0:07:18.71,0:07:21.98,Default,,0,0,0,,in Haskell. The first thing you see is\Nthat it's
Dialogue: 0,0:07:21.98,0:07:26.98,Default,,0,0,0,,much more concise but the other thing is\Nthat there's no statement. It's just
Dialogue: 0,0:07:26.98,0:07:30.23,Default,,0,0,0,,two expressions.\NThe expression you see
Dialogue: 0,0:07:30.23,0:07:33.43,Default,,0,0,0,,here
Dialogue: 0,0:07:33.43,0:07:36.74,Default,,0,0,0,,on the right. One dot dot ten.
Dialogue: 0,0:07:36.74,0:07:40.30,Default,,0,0,0,,Creates a list of the integers from one\Nto ten.
Dialogue: 0,0:07:40.30,0:07:43.92,Default,,0,0,0,,And then we just sum those integers up.
Dialogue: 0,0:07:43.92,0:07:47.38,Default,,0,0,0,,So here you see that we're composing
Dialogue: 0,0:07:47.38,0:07:52.67,Default,,0,0,0,,the code by having an expression.\NOne that creates this list from one to ten
Dialogue: 0,0:07:52.67,0:07:56.60,Default,,0,0,0,,and then we apply that value
Dialogue: 0,0:07:56.60,0:07:59.68,Default,,0,0,0,,to a function sum that will sum things
Dialogue: 0,0:07:59.68,0:08:03.08,Default,,0,0,0,,up for us. In Java 8
Dialogue: 0,0:08:03.08,0:08:06.67,Default,,0,0,0,,you can write the same code
Dialogue: 0,0:08:06.67,0:08:10.04,Default,,0,0,0,,using Java 8 streams, we will
Dialogue: 0,0:08:10.04,0:08:14.07,Default,,0,0,0,,dive deeper into Java 8 and a future
Dialogue: 0,0:08:14.07,0:08:17.59,Default,,0,0,0,,lesson but for now here is the way
Dialogue: 0,0:08:17.59,0:08:21.99,Default,,0,0,0,,we do this in Haskell.\NThank you
Dialogue: 0,0:08:21.99,0:08:24.59,Default,,0,0,0,,and see you in part two.
