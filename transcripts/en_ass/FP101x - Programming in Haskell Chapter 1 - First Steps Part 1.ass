[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.18,0:00:03.64,Default,,0,0,0,,Hey everybody, and welcome back to
Dialogue: 0,0:00:03.64,0:00:07.14,Default,,0,0,0,,FP101x - Functional Programming.
Dialogue: 0,0:00:07.14,0:00:10.34,Default,,0,0,0,,What we're going
Dialogue: 0,0:00:10.34,0:00:14.00,Default,,0,0,0,,to do today is taking the first
Dialogue: 0,0:00:14.00,0:00:18.16,Default,,0,0,0,,baby steps in learning Haskell.
Dialogue: 0,0:00:18.16,0:00:21.39,Default,,0,0,0,,One of my favorite movies of all time
Dialogue: 0,0:00:21.39,0:00:25.89,Default,,0,0,0,,is the Karate Kid and if you haven't\Nseen this movie,
Dialogue: 0,0:00:25.89,0:00:29.17,Default,,0,0,0,,stop watching
Dialogue: 0,0:00:29.17,0:00:32.20,Default,,0,0,0,,this lecture and go watch this movie\Nfirst.
Dialogue: 0,0:00:32.20,0:00:37.03,Default,,0,0,0,,Every time I need to learn something new,\NI rewatch the Karate Kid
Dialogue: 0,0:00:37.03,0:00:40.73,Default,,0,0,0,,and I can tell you... I've seen it\Nmaybe
Dialogue: 0,0:00:40.73,0:00:44.21,Default,,0,0,0,,20-30 times and every time I watch it,
Dialogue: 0,0:00:44.21,0:00:47.82,Default,,0,0,0,,I learn something new.\NIf you
Dialogue: 0,0:00:47.82,0:00:50.89,Default,,0,0,0,,watch the movie, you will see that
Dialogue: 0,0:00:50.89,0:00:55.50,Default,,0,0,0,,the boy here, Daniel, wants\Nto learn karate
Dialogue: 0,0:00:55.50,0:00:59.39,Default,,0,0,0,,and mister Miyagi, the gentleman\Nhere
Dialogue: 0,0:00:59.39,0:01:03.32,Default,,0,0,0,,on the other side, makes him do a\Nlot of
Dialogue: 0,0:01:03.32,0:01:08.32,Default,,0,0,0,,what Daniel thinks are pointless\Nexercises. And he gets kind of frustrated.
Dialogue: 0,0:01:08.32,0:01:11.40,Default,,0,0,0,,But in order to learn something you have\Nto go
Dialogue: 0,0:01:11.40,0:01:15.65,Default,,0,0,0,,through a lot of exercises because\Nthere's a lot of muscle memory or, in
Dialogue: 0,0:01:15.65,0:01:20.04,Default,,0,0,0,,case of programming you have to have the\Nmuscle memory in your fingers. They're
Dialogue: 0,0:01:20.04,0:01:22.95,Default,,0,0,0,,certain things should not have to think\Nabout.
Dialogue: 0,0:01:22.95,0:01:27.52,Default,,0,0,0,,That you have to drill. That you have to\Ndo over and over and over again.
Dialogue: 0,0:01:27.52,0:01:32.43,Default,,0,0,0,,And that's what we are going to do in\Nthis lecture today.
Dialogue: 0,0:01:32.43,0:01:36.07,Default,,0,0,0,,So don't get frustrated, don't be like\NDaniel.
Dialogue: 0,0:01:36.07,0:01:40.28,Default,,0,0,0,,Be a grownup and just do your exercises
Dialogue: 0,0:01:40.28,0:01:44.42,Default,,0,0,0,,on and on: wax on wax off, wax on, wax off...
Dialogue: 0,0:01:44.42,0:01:47.64,Default,,0,0,0,,until it becomes completely automatic
Dialogue: 0,0:01:47.64,0:01:51.45,Default,,0,0,0,,and then you can use your brain to solve\Nthe real problem.
Dialogue: 0,0:01:51.45,0:01:55.64,Default,,0,0,0,,You don't have to think about the basics\Nanymore. And every time you learn
Dialogue: 0,0:01:55.64,0:01:56.54,Default,,0,0,0,,something new
Dialogue: 0,0:01:56.54,0:02:01.04,Default,,0,0,0,,rewatch this great movie.
Dialogue: 0,0:02:01.04,0:02:05.56,Default,,0,0,0,,Let's show some Haskell. The Haskell implementation\Nthat we're using
Dialogue: 0,0:02:05.56,0:02:10.31,Default,,0,0,0,,in this course is the Glasgow Haskell\NCompiler
Dialogue: 0,0:02:10.31,0:02:13.53,Default,,0,0,0,,sometimes also called the Glorious\NHaskell Compiler
Dialogue: 0,0:02:13.53,0:02:18.19,Default,,0,0,0,,and GHC is the leading implementation of\NHaskell.
Dialogue: 0,0:02:18.19,0:02:23.54,Default,,0,0,0,,It has both a compiler and an\Ninteractive
Dialogue: 0,0:02:23.54,0:02:26.90,Default,,0,0,0,,REPL loop that you can use to type in\Nyour
Dialogue: 0,0:02:26.90,0:02:30.31,Default,,0,0,0,,code.\NThe interactive nature
Dialogue: 0,0:02:30.31,0:02:34.30,Default,,0,0,0,,of the GHC interpreter makes it really\Neasy
Dialogue: 0,0:02:34.30,0:02:37.45,Default,,0,0,0,,to experiment with Haskell
Dialogue: 0,0:02:37.45,0:02:40.76,Default,,0,0,0,,and that's why it's also very useful for\Nthis course.
Dialogue: 0,0:02:40.76,0:02:44.33,Default,,0,0,0,,Many of the exercises
Dialogue: 0,0:02:44.33,0:02:47.79,Default,,0,0,0,,that you will get during the course, you\Ncan do
Dialogue: 0,0:02:47.79,0:02:51.51,Default,,0,0,0,,by using GHC.\NI don't
Dialogue: 0,0:02:51.51,0:02:54.80,Default,,0,0,0,,see that as cheating because
Dialogue: 0,0:02:54.80,0:02:58.73,Default,,0,0,0,,as programmers, we should really use the\Ncompiler
Dialogue: 0,0:02:58.73,0:03:04.42,Default,,0,0,0,,to help us. The computer is there\Nto help us program the computer.
Dialogue: 0,0:03:04.42,0:03:08.66,Default,,0,0,0,,If we don't use that, that would be\Nstupid. GHC
Dialogue: 0,0:03:08.66,0:03:14.07,Default,,0,0,0,,is freely available from the website\Nhere. The link will be also be on the
Dialogue: 0,0:03:14.07,0:03:17.88,Default,,0,0,0,,course website, and you can also
Dialogue: 0,0:03:17.88,0:03:21.22,Default,,0,0,0,,Google or Bing for the Haskell platform
Dialogue: 0,0:03:21.22,0:03:24.78,Default,,0,0,0,,and it's available for all major\Nplatforms
Dialogue: 0,0:03:24.78,0:03:29.91,Default,,0,0,0,,Mac, Windows and Linux.\NTo start GHC,
Dialogue: 0,0:03:29.91,0:03:33.84,Default,,0,0,0,,you just type from the command line 'ghci'
Dialogue: 0,0:03:33.84,0:03:37.54,Default,,0,0,0,,and then you get some
Dialogue: 0,0:03:37.54,0:03:41.23,Default,,0,0,0,,text blurps and there you see a prompt
Dialogue: 0,0:03:41.23,0:03:44.97,Default,,0,0,0,,Prelude> and that's where you can start\Ntyping in
Dialogue: 0,0:03:44.97,0:03:49.18,Default,,0,0,0,,expressions. For example we can type in\Nthe expression
Dialogue: 0,0:03:49.18,0:03:53.15,Default,,0,0,0,,2 + 3 * 4 and
Dialogue: 0,0:03:53.15,0:03:57.69,Default,,0,0,0,,GHCi will then print the result for that.\NIn this case we're really using
Dialogue: 0,0:03:57.69,0:04:01.38,Default,,0,0,0,,GHCi as kind of a calculator.
Dialogue: 0,0:04:01.38,0:04:05.25,Default,,0,0,0,,It's a little bit like a calculator\Non the command line interface,
Dialogue: 0,0:04:05.25,0:04:10.34,Default,,0,0,0,,instead of a calculator with buttons.\NWhat we also see here is that since
Dialogue: 0,0:04:10.34,0:04:13.68,Default,,0,0,0,,2 + 3 * 4 apparently is 14
Dialogue: 0,0:04:13.68,0:04:17.45,Default,,0,0,0,,that multiplication binds stronger
Dialogue: 0,0:04:17.45,0:04:20.64,Default,,0,0,0,,than addition. So there's no surprises\Nthere as
Dialogue: 0,0:04:20.64,0:04:24.45,Default,,0,0,0,,most languages have that.\NIf we want to
Dialogue: 0,0:04:24.45,0:04:28.45,Default,,0,0,0,,first do the addition and then\Nthe multiplication, we have to put
Dialogue: 0,0:04:28.45,0:04:31.51,Default,,0,0,0,,parentheses, so we write\N(2 + 3) * 4
Dialogue: 0,0:04:31.51,0:04:35.91,Default,,0,0,0,,and then the result is 20.\NWe can do
Dialogue: 0,0:04:35.91,0:04:40.88,Default,,0,0,0,,more complicated expressions like the\Nsquare root of (3 ^ 2 + 4 ^2)
Dialogue: 0,0:04:41.63,0:04:46.69,Default,,0,0,0,,and we get 5.
Dialogue: 0,0:04:46.69,0:04:50.10,Default,,0,0,0,,As you saw, there was the\NPrelude>
Dialogue: 0,0:04:50.10,0:04:53.49,Default,,0,0,0,,prompt
Dialogue: 0,0:04:53.49,0:04:58.26,Default,,0,0,0,,here. So the Haskell Prelude it's like\Nthe SDK for Haskell. These are all the
Dialogue: 0,0:04:58.26,0:04:59.39,Default,,0,0,0,,standard functions
Dialogue: 0,0:04:59.39,0:05:03.33,Default,,0,0,0,,that come for free with Haskell.\NOn the website
Dialogue: 0,0:05:03.33,0:05:07.93,Default,,0,0,0,,we will tell you how to get\Nother libraries for Haskell,
Dialogue: 0,0:05:07.93,0:05:13.62,Default,,0,0,0,,but we won't discuss that in too much\Ndetail right here. You
Dialogue: 0,0:05:13.62,0:05:16.74,Default,,0,0,0,,you can read up on that.\NWe will
Dialogue: 0,0:05:16.74,0:05:20.84,Default,,0,0,0,,will try to stick with just the\Nstandard library functions - the standard
Dialogue: 0,0:05:20.84,0:05:21.39,Default,,0,0,0,,prelude.
Dialogue: 0,0:05:21.39,0:05:27.68,Default,,0,0,0,,A lot of the functions in the prelude
Dialogue: 0,0:05:27.68,0:05:30.71,Default,,0,0,0,,are functions over lists.
Dialogue: 0,0:05:30.71,0:05:34.75,Default,,0,0,0,,We're going to walk through a\Ncouple of them and then in later lectures
Dialogue: 0,0:05:34.75,0:05:38.81,Default,,0,0,0,,we will implemented these functions in\Nseveral different
Dialogue: 0,0:05:38.81,0:05:42.50,Default,,0,0,0,,manners. The first function here is head,\Nwhich takes a list,
Dialogue: 0,0:05:42.50,0:05:46.35,Default,,0,0,0,,and the way we write lists in Haskell\Nis with square brackets and the
Dialogue: 0,0:05:46.35,0:05:48.28,Default,,0,0,0,,elements separated by commas,
Dialogue: 0,0:05:48.28,0:05:52.03,Default,,0,0,0,,so the head of [1,2,3,4,5] is
Dialogue: 0,0:05:52.03,0:05:56.11,Default,,0,0,0,,unsurprisingly 1.\NThe tail,
Dialogue: 0,0:05:56.11,0:06:00.13,Default,,0,0,0,,that's the opposite of head, so is\Neverything on the list
Dialogue: 0,0:06:00.13,0:06:03.34,Default,,0,0,0,,except the head, so the tail of [1,2,3,4,5]
Dialogue: 0,0:06:03.34,0:06:07.71,Default,,0,0,0,,is the list [2,3,4,5].\NWe can also select
Dialogue: 0,0:06:07.71,0:06:11.36,Default,,0,0,0,,the n-th element of the list with\Nthis
Dialogue: 0,0:06:11.36,0:06:16.25,Default,,0,0,0,,double exclamation mark operator.\NIf we want to select the second element
Dialogue: 0,0:06:16.25,0:06:17.16,Default,,0,0,0,,of the list
Dialogue: 0,0:06:17.16,0:06:20.32,Default,,0,0,0,,[1,2,3,4,5] we get
Dialogue: 0,0:06:20.32,0:06:24.03,Default,,0,0,0,,3. So what do we learn from this?\NWell...
Dialogue: 0,0:06:24.03,0:06:27.02,Default,,0,0,0,,that the first element of the list
Dialogue: 0,0:06:27.02,0:06:29.61,Default,,0,0,0,,has index 0.
Dialogue: 0,0:06:29.61,0:06:32.74,Default,,0,0,0,,Haskell starts
Dialogue: 0,0:06:32.74,0:06:36.84,Default,,0,0,0,,indexing lists by zero.\NThere's
Dialogue: 0,0:06:36.84,0:06:40.40,Default,,0,0,0,,2 exclamation marks here and there's
Dialogue: 0,0:06:40.40,0:06:44.15,Default,,0,0,0,,a good reason for that:\Nbecause in Haskell,
Dialogue: 0,0:06:44.15,0:06:47.18,Default,,0,0,0,,lists are not arrays,\Nso indexing
Dialogue: 0,0:06:47.18,0:06:50.90,Default,,0,0,0,,into the list here at the second\Nelement
Dialogue: 0,0:06:50.90,0:06:54.72,Default,,0,0,0,,will traverse the list. So it\Nwill traverse the list, throw away 1
Dialogue: 0,0:06:54.72,0:06:59.50,Default,,0,0,0,,throw away 2 and then return 3.\NThis is not a constant time
Dialogue: 0,0:06:59.50,0:07:04.20,Default,,0,0,0,,operation. Indexing into a list, unlike\Nindexing into an array,
Dialogue: 0,0:07:04.20,0:07:07.91,Default,,0,0,0,,in Haskell is linear in the length\Nof the list.
Dialogue: 0,0:07:07.91,0:07:13.09,Default,,0,0,0,,In general linear in the size of the
Dialogue: 0,0:07:13.09,0:07:13.59,Default,,0,0,0,,list.
Dialogue: 0,0:07:13.59,0:07:17.50,Default,,0,0,0,,But fortunately
Dialogue: 0,0:07:17.50,0:07:21.18,Default,,0,0,0,,we will hardly see uses
Dialogue: 0,0:07:21.18,0:07:24.62,Default,,0,0,0,,of this operator in practice.
Dialogue: 0,0:07:24.62,0:07:28.55,Default,,0,0,0,,If you find yourself wanting to use list\Nindexing
Dialogue: 0,0:07:28.55,0:07:34.18,Default,,0,0,0,,then you know that you have not done\Nenough wax on, wax off, wax on, wax off.
Dialogue: 0,0:07:34.18,0:07:37.56,Default,,0,0,0,,Tou're still too much in the mindset of
Dialogue: 0,0:07:37.56,0:07:40.68,Default,,0,0,0,,imperative programming using arrays.
Dialogue: 0,0:07:40.68,0:07:45.18,Default,,0,0,0,,In Haskell we typically use higher\Norder functions like map, filter, fold
Dialogue: 0,0:07:45.18,0:07:48.30,Default,,0,0,0,,and not indexing to
Dialogue: 0,0:07:48.30,0:07:53.11,Default,,0,0,0,,perform complex operations over lists.\NHere's another
Dialogue: 0,0:07:53.11,0:07:59.71,Default,,0,0,0,,example - take 3 - it takes the first\Nthree elements of a list. If we have
Dialogue: 0,0:07:59.71,0:08:01.18,Default,,0,0,0,,the list [1,2,3,4,5]
Dialogue: 0,0:08:01.18,0:08:04.68,Default,,0,0,0,,it returns the first three\Nelements
Dialogue: 0,0:08:04.68,0:08:08.13,Default,,0,0,0,,[1,2,3]\NDrop
Dialogue: 0,0:08:08.13,0:08:11.61,Default,,0,0,0,,is the opposite, so it takes a number
Dialogue: 0,0:08:11.61,0:08:16.71,Default,,0,0,0,,and a list and it drops the first\Nthree elements of the list. In some
Dialogue: 0,0:08:16.71,0:08:17.76,Default,,0,0,0,,sense, drop
Dialogue: 0,0:08:17.76,0:08:20.81,Default,,0,0,0,,and take are
Dialogue: 0,0:08:20.81,0:08:24.30,Default,,0,0,0,,the generalizations of head and tail.\NHead and tail
Dialogue: 0,0:08:24.30,0:08:29.15,Default,,0,0,0,,just take the first and the rest of the\Nlist and then with take and drop
Dialogue: 0,0:08:29.15,0:08:33.13,Default,,0,0,0,,you can generalize that\Nto arbitrary numbers.
Dialogue: 0,0:08:33.13,0:08:36.37,Default,,0,0,0,,Calculating the length of the list...
Dialogue: 0,0:08:36.37,0:08:40.45,Default,,0,0,0,,we do that by
Dialogue: 0,0:08:40.45,0:08:44.93,Default,,0,0,0,,calling the function length.\NLength of [1,2,3,4,5] is 5.
Dialogue: 0,0:08:44.93,0:08:49.18,Default,,0,0,0,,Again, lists in Haskell are not\Nlike arrays
Dialogue: 0,0:08:49.18,0:08:53.91,Default,,0,0,0,,in other languages, so taking the length\Nis not a constant time operation.
Dialogue: 0,0:08:53.91,0:08:58.07,Default,,0,0,0,,It takes time linearly in the\Nlength of the list.
Dialogue: 0,0:08:58.07,0:09:04.89,Default,,0,0,0,,Sum sums up all the elements so\Nif we call sum of [1,2,3,4,5]
Dialogue: 0,0:09:04.89,0:09:09.04,Default,,0,0,0,,the result is 15.\NProduct
Dialogue: 0,0:09:09.04,0:09:12.57,Default,,0,0,0,,is the same as sum, except instead of\Nadding up the numbers, it
Dialogue: 0,0:09:12.57,0:09:17.08,Default,,0,0,0,,multiplies all of them, so\Nmultiplying
Dialogue: 0,0:09:17.08,0:09:21.52,Default,,0,0,0,,1, 2, 3, 4 and 5 - like taking\Nthe factorial of 5 -
Dialogue: 0,0:09:21.52,0:09:27.64,Default,,0,0,0,,is 120. Appending two lists is another\Ncommon operation: you take 2 lists and
Dialogue: 0,0:09:27.64,0:09:30.29,Default,,0,0,0,,you smash them together into a new list,\Nso if I
Dialogue: 0,0:09:30.29,0:09:33.57,Default,,0,0,0,,append [1,2,3] with [4,5]
Dialogue: 0,0:09:33.57,0:09:38.66,Default,,0,0,0,,we get the list [1,2,3,4,5].\NThe last function here
Dialogue: 0,0:09:38.66,0:09:43.22,Default,,0,0,0,,on this slide is reversing a list.
Dialogue: 0,0:09:43.22,0:09:46.26,Default,,0,0,0,,Reverse [1,2,3,4,5] gives you
Dialogue: 0,0:09:46.26,0:09:50.38,Default,,0,0,0,,[5,4,3,2,1]\NIn the rest of
Dialogue: 0,0:09:50.38,0:09:54.99,Default,,0,0,0,,these lectures, we will define all\Nthese functions ourselves
Dialogue: 0,0:09:54.99,0:09:58.30,Default,,0,0,0,,in several ways, but right now
Dialogue: 0,0:09:58.30,0:10:01.60,Default,,0,0,0,,it's good to play with them to\Nsee what they do,
Dialogue: 0,0:10:01.60,0:10:05.04,Default,,0,0,0,,and then we will be ready to\Nimplement them.
Dialogue: 0,0:10:05.04,0:10:08.64,Default,,0,0,0,,Then we will know what they are\Nsupposed to do.
Dialogue: 0,0:10:08.64,0:10:12.38,Default,,0,0,0,,Here's
Dialogue: 0,0:10:12.38,0:10:16.26,Default,,0,0,0,,another very important slide
Dialogue: 0,0:10:16.26,0:10:20.83,Default,,0,0,0,,and that is about function application.\NHaskell
Dialogue: 0,0:10:20.83,0:10:24.45,Default,,0,0,0,,is very different than mathematics on\Nthe one side
Dialogue: 0,0:10:24.45,0:10:27.70,Default,,0,0,0,,and very different from other\Nprogramming languages as well.
Dialogue: 0,0:10:27.70,0:10:32.91,Default,,0,0,0,,In mathematics when you apply a function -\Nmathematics that you do in school or
Dialogue: 0,0:10:32.91,0:10:34.86,Default,,0,0,0,,college when you take analysis -
Dialogue: 0,0:10:34.86,0:10:38.10,Default,,0,0,0,,when you apply a function to an argument,
Dialogue: 0,0:10:38.10,0:10:41.64,Default,,0,0,0,,you always use parentheses.\NIn this case
Dialogue: 0,0:10:41.64,0:10:45.10,Default,,0,0,0,,when we apply a function here...\Nthis is
Dialogue: 0,0:10:45.10,0:10:49.41,Default,,0,0,0,,applying a function f to arguments\Na and b
Dialogue: 0,0:10:49.41,0:10:52.18,Default,,0,0,0,,and then adding c
Dialogue: 0,0:10:52.18,0:10:55.91,Default,,0,0,0,,space d.\NIn mathematics,
Dialogue: 0,0:10:55.91,0:10:59.46,Default,,0,0,0,,typically, and that comes from\Nphysics
Dialogue: 0,0:10:59.46,0:11:03.72,Default,,0,0,0,,is that space means multiplication.
Dialogue: 0,0:11:03.72,0:11:07.30,Default,,0,0,0,,If you look at the mathematical\Ntextbook
Dialogue: 0,0:11:07.30,0:11:11.43,Default,,0,0,0,,and you see c d
Dialogue: 0,0:11:11.43,0:11:14.80,Default,,0,0,0,,it usually means c multiplied by d
Dialogue: 0,0:11:14.80,0:11:18.48,Default,,0,0,0,,and therefore when you apply a function\Nyou're using
Dialogue: 0,0:11:18.48,0:11:24.33,Default,,0,0,0,,parentheses like this to disambiguate.\NSince in Haskell
Dialogue: 0,0:11:24.33,0:11:27.53,Default,,0,0,0,,function application is used much more\Noften
Dialogue: 0,0:11:27.53,0:11:30.99,Default,,0,0,0,,than multiplication,\Nwhereas in physics
Dialogue: 0,0:11:30.99,0:11:34.63,Default,,0,0,0,,multiplication is used more often, so\Nthat's where
Dialogue: 0,0:11:34.63,0:11:40.08,Default,,0,0,0,,multiplication is given the most\Nwhite symbol, the least
Dialogue: 0,0:11:40.08,0:11:43.68,Default,,0,0,0,,visible symbol, the most white spacey symbol.\NIn Haskell,
Dialogue: 0,0:11:43.68,0:11:46.68,Default,,0,0,0,,function application is denoted by white\Nspace
Dialogue: 0,0:11:46.68,0:11:50.05,Default,,0,0,0,,so that it's not so much in\Nyour face.
Dialogue: 0,0:11:50.05,0:11:54.05,Default,,0,0,0,,So in Haskell instead of writing\Nf (a,b) + c d
Dialogue: 0,0:11:54.05,0:11:58.96,Default,,0,0,0,,function application\Nbecomes
Dialogue: 0,0:11:58.96,0:12:02.66,Default,,0,0,0,,denoted by a space,\Nso it's f a b + c * d
Dialogue: 0,0:12:06.18,0:12:09.54,Default,,0,0,0,,In most programming languages
Dialogue: 0,0:12:09.54,0:12:13.79,Default,,0,0,0,,you would write
Dialogue: 0,0:12:13.79,0:12:18.54,Default,,0,0,0,,f (a, b) so they are in\Nsome sense the
Dialogue: 0,0:12:18.54,0:12:23.68,Default,,0,0,0,,worst of two worlds: there you\Nhave to write everything explicit.
Dialogue: 0,0:12:23.68,0:12:27.97,Default,,0,0,0,,In Haskell we made the decision that\Nfunction application
Dialogue: 0,0:12:27.97,0:12:31.90,Default,,0,0,0,,is done by using a space and\Nmultiplication
Dialogue: 0,0:12:31.90,0:12:35.50,Default,,0,0,0,,is done by using multiplication.
Dialogue: 0,0:12:35.50,0:12:39.08,Default,,0,0,0,,Also,
Dialogue: 0,0:12:39.08,0:12:42.48,Default,,0,0,0,,function application binds stronger
Dialogue: 0,0:12:42.48,0:12:45.79,Default,,0,0,0,,than any other operator.\NIf you see
Dialogue: 0,0:12:45.79,0:12:49.82,Default,,0,0,0,,f a + b, that means\Nf applied to a
Dialogue: 0,0:12:49.82,0:12:52.97,Default,,0,0,0,,plus b,\NIt doesn't mean f
Dialogue: 0,0:12:52.97,0:12:57.25,Default,,0,0,0,,applied to (a + b).
Dialogue: 0,0:12:57.25,0:13:01.08,Default,,0,0,0,,People have to get used to this.\NThis doesn't mean
Dialogue: 0,0:13:01.08,0:13:04.21,Default,,0,0,0,,f times a plus b.\NIt means
Dialogue: 0,0:13:04.21,0:13:05.35,Default,,0,0,0,,f applied
Dialogue: 0,0:13:05.35,0:13:08.40,Default,,0,0,0,,to a plus b.\NSo that's
Dialogue: 0,0:13:08.40,0:13:12.37,Default,,0,0,0,,kind of similar to multiplication binding\Nstronger than addition.
Dialogue: 0,0:13:12.37,0:13:16.80,Default,,0,0,0,,Here's a table that give you
Dialogue: 0,0:13:16.80,0:13:20.21,Default,,0,0,0,,a couple of more expressions
Dialogue: 0,0:13:20.21,0:13:23.41,Default,,0,0,0,,on the one side Haskell,
Dialogue: 0,0:13:23.41,0:13:27.75,Default,,0,0,0,,and on the other side mathematics.\NSo this is what you should forget.
Dialogue: 0,0:13:27.75,0:13:31.24,Default,,0,0,0,,I'm going to stand in front of that..this\Nis what you should forget.
Dialogue: 0,0:13:31.24,0:13:34.32,Default,,0,0,0,,And this is what you should learn.
Dialogue: 0,0:13:34.32,0:13:38.59,Default,,0,0,0,,So forget what's behind me and learn
Dialogue: 0,0:13:38.59,0:13:42.67,Default,,0,0,0,,what's on this side.
Dialogue: 0,0:13:42.67,0:13:45.89,Default,,0,0,0,,Instead of f open parentheses x,\Nwe write
Dialogue: 0,0:13:45.89,0:13:50.42,Default,,0,0,0,,f space x. Instead of passing two\Nparameters to f
Dialogue: 0,0:13:50.42,0:13:55.23,Default,,0,0,0,,we apply f to x and then\Napply that result to y.
Dialogue: 0,0:13:55.23,0:14:00.54,Default,,0,0,0,,Instead of f open parens g, open parens x\Nwe can write
Dialogue: 0,0:14:00.54,0:14:04.11,Default,,0,0,0,,f of g of x and later we'll see
Dialogue: 0,0:14:04.11,0:14:07.12,Default,,0,0,0,,that we can write that using function\Ncomposition
Dialogue: 0,0:14:07.12,0:14:11.68,Default,,0,0,0,,as f composed g.
Dialogue: 0,0:14:11.68,0:14:14.94,Default,,0,0,0,,the rest of the examples
Dialogue: 0,0:14:14.94,0:14:18.72,Default,,0,0,0,,should be obvious.\NIf you just look at
Dialogue: 0,0:14:18.72,0:14:22.68,Default,,0,0,0,,shapes of these two - don't try to\Ninterpret them - you will see that the
Dialogue: 0,0:14:22.68,0:14:24.30,Default,,0,0,0,,Haskell code here
Dialogue: 0,0:14:24.30,0:14:27.65,Default,,0,0,0,,looks much lighter-weight than the code
Dialogue: 0,0:14:27.65,0:14:33.07,Default,,0,0,0,,on this side. Haskell programmers are\Nlazy - we don't want to type too much -
Dialogue: 0,0:14:33.07,0:14:36.47,Default,,0,0,0,,so this looks much more beautiful\Nthan this
Dialogue: 0,0:14:36.47,0:14:39.86,Default,,0,0,0,,and that's why Haskell's syntax is designed\Nthe way it is.
Dialogue: 0,0:14:39.86,0:14:43.35,Default,,0,0,0,,Thank you!.\NThis was the end of Part 1.
Dialogue: 0,0:14:43.35,0:14:46.68,Default,,0,0,0,,See you in a bit for the remainder of
Dialogue: 0,0:14:46.68,0:14:47.32,Default,,0,0,0,,chapter 1.
