[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.91,0:00:05.14,Default,,0,0,0,,Welcome back!\NI hope you have all installed GHC
Dialogue: 0,0:00:05.14,0:00:08.59,Default,,0,0,0,,and played a little bit by typing in\Nexpressions.
Dialogue: 0,0:00:08.59,0:00:13.33,Default,,0,0,0,,What we're going to do now is move beyond\Nsimple expressions
Dialogue: 0,0:00:13.33,0:00:18.35,Default,,0,0,0,,and see how we can load full Haskell\Nprograms
Dialogue: 0,0:00:18.35,0:00:23.31,Default,,0,0,0,,into GHC.\NIn Haskell, programs are not called
Dialogue: 0,0:00:23.31,0:00:27.26,Default,,0,0,0,,programs. Typically Haskell people refer\Nto their code
Dialogue: 0,0:00:27.26,0:00:30.68,Default,,0,0,0,,as scripts because
Dialogue: 0,0:00:30.68,0:00:34.19,Default,,0,0,0,,Haskell programs are maybe shorter\Nthan normal code.
Dialogue: 0,0:00:34.19,0:00:37.73,Default,,0,0,0,,I just call them Haskell programs,
Dialogue: 0,0:00:37.73,0:00:41.55,Default,,0,0,0,,but the haskell parlance
Dialogue: 0,0:00:41.55,0:00:44.89,Default,,0,0,0,,is scripts.
Dialogue: 0,0:00:44.89,0:00:50.61,Default,,0,0,0,,New functions, if you want to\Ndefine a complete Haskell program,
Dialogue: 0,0:00:50.61,0:00:53.87,Default,,0,0,0,,you define them in a
Dialogue: 0,0:00:53.87,0:00:57.17,Default,,0,0,0,,text file that contains a list of function\Ndefinitions
Dialogue: 0,0:00:57.17,0:01:00.84,Default,,0,0,0,,and this text file
Dialogue: 0,0:01:00.84,0:01:06.04,Default,,0,0,0,,has a suffix .hs that indicates\Nthat it's a
Dialogue: 0,0:01:06.04,0:01:10.17,Default,,0,0,0,,Haskell file.\NJust like an HTML file has an
Dialogue: 0,0:01:10.17,0:01:14.34,Default,,0,0,0,,.html suffix, or CSS files have .css
Dialogue: 0,0:01:14.34,0:01:17.89,Default,,0,0,0,,suffix, or Java file
Dialogue: 0,0:01:17.89,0:01:21.35,Default,,0,0,0,,has a .java suffix,
Dialogue: 0,0:01:21.35,0:01:25.00,Default,,0,0,0,,a Haskell file is called whatever
Dialogue: 0,0:01:25.00,0:01:29.04,Default,,0,0,0,,.hs. So this is not mandatory,
Dialogue: 0,0:01:29.04,0:01:32.32,Default,,0,0,0,,but it's useful that you can see when you
Dialogue: 0,0:01:32.32,0:01:35.68,Default,,0,0,0,,list the files in a directory that you\Ncan see that this
Dialogue: 0,0:01:35.68,0:01:40.21,Default,,0,0,0,,is a Haskell script.\NNow when you
Dialogue: 0,0:01:40.21,0:01:44.43,Default,,0,0,0,,are using GHC,
Dialogue: 0,0:01:44.43,0:01:47.53,Default,,0,0,0,,what you do is you edit your
Dialogue: 0,0:01:47.53,0:01:52.04,Default,,0,0,0,,script in one window, using whatever\Neditor of choice,
Dialogue: 0,0:01:52.04,0:01:55.25,Default,,0,0,0,,and then whenever you make a change, you\Nload your
Dialogue: 0,0:01:55.25,0:01:59.46,Default,,0,0,0,,script into GHC and\Nstart
Dialogue: 0,0:01:59.46,0:02:03.59,Default,,0,0,0,,executing expressions.\NSo that's the kind of workflow
Dialogue: 0,0:02:03.59,0:02:07.36,Default,,0,0,0,,that we will be using for most of the\Ncourse. For simple things
Dialogue: 0,0:02:07.36,0:02:12.08,Default,,0,0,0,,that's what you. Of course, when you're\Nbuilding commercial Haskell applications
Dialogue: 0,0:02:12.08,0:02:13.42,Default,,0,0,0,,this is not what you do.
Dialogue: 0,0:02:13.42,0:02:16.45,Default,,0,0,0,,You will compile them into standalone\Nexecutables,
Dialogue: 0,0:02:16.45,0:02:21.55,Default,,0,0,0,,but for the purposes of this course, this\Nis the workflow: we have
Dialogue: 0,0:02:21.55,0:02:25.95,Default,,0,0,0,,the editor window open, we have the GHCi\Ninterpreter open
Dialogue: 0,0:02:25.95,0:02:30.15,Default,,0,0,0,,and then we will load the scripts.\NIn this case,
Dialogue: 0,0:02:30.15,0:02:33.88,Default,,0,0,0,,we will create a
Dialogue: 0,0:02:33.88,0:02:37.14,Default,,0,0,0,,text file test.hs and in there
Dialogue: 0,0:02:37.14,0:02:40.84,Default,,0,0,0,,we put two function definitions.\NThe first one:
Dialogue: 0,0:02:40.84,0:02:45.38,Default,,0,0,0,,double of x equals x + x\N- does what it promises -
Dialogue: 0,0:02:45.38,0:02:49.89,Default,,0,0,0,,and then we can quadruple by\Ncalling double of double of x.
Dialogue: 0,0:02:49.89,0:02:55.45,Default,,0,0,0,,So we save that file and then\Nwe start
Dialogue: 0,0:02:55.45,0:02:59.69,Default,,0,0,0,,GHCi and invoking it with
Dialogue: 0,0:02:59.69,0:03:04.40,Default,,0,0,0,,test.hs and now both the Haskell\Nstandard library
Dialogue: 0,0:03:04.40,0:03:08.22,Default,,0,0,0,,and the functions quadruple and\Ndouble that we defined
Dialogue: 0,0:03:08.22,0:03:12.03,Default,,0,0,0,,in the test.hs will be\Navailable. For example, we can call
Dialogue: 0,0:03:12.03,0:03:13.50,Default,,0,0,0,,quadruple of 10
Dialogue: 0,0:03:13.50,0:03:16.81,Default,,0,0,0,,and it will return 40, but we can also
Dialogue: 0,0:03:16.81,0:03:21.04,Default,,0,0,0,,still call all the standard library\Nfunctions. For example
Dialogue: 0,0:03:21.04,0:03:24.66,Default,,0,0,0,,we can take
Dialogue: 0,0:03:24.66,0:03:30.07,Default,,0,0,0,,double of 2 of this list. Double of 2 is\N4, so this is the same as take 4,
Dialogue: 0,0:03:30.07,0:03:30.65,Default,,0,0,0,,
Dialogue: 0,0:03:30.65,0:03:33.82,Default,,0,0,0,,so we take the first 4 elements\Nof the list.
Dialogue: 0,0:03:33.82,0:03:39.20,Default,,0,0,0,,Now what we do
Dialogue: 0,0:03:39.20,0:03:44.54,Default,,0,0,0,,is we just leave GHC open, we\Nreturn to our editor and
Dialogue: 0,0:03:44.54,0:03:47.57,Default,,0,0,0,,add
Dialogue: 0,0:03:47.57,0:03:51.29,Default,,0,0,0,,2 new definitions: one is factorial
Dialogue: 0,0:03:51.29,0:03:56.75,Default,,0,0,0,,and the other one is average.\NSince we're starting here,
Dialogue: 0,0:03:56.75,0:04:01.18,Default,,0,0,0,,we are using some syntax that\Nwe haven't introduced yet so
Dialogue: 0,0:04:01.18,0:04:04.38,Default,,0,0,0,,bear with me.\NSo product
Dialogue: 0,0:04:04.38,0:04:08.10,Default,,0,0,0,,of 1 to n - this thing here
Dialogue: 0,0:04:08.10,0:04:11.84,Default,,0,0,0,,is the list of values 1 up to n -
Dialogue: 0,0:04:11.84,0:04:16.07,Default,,0,0,0,,and then product is the\Nstandard library function
Dialogue: 0,0:04:16.07,0:04:19.16,Default,,0,0,0,,that multiplies all the values\Nin a list, so
Dialogue: 0,0:04:19.16,0:04:24.33,Default,,0,0,0,,this is a good definition of factorial.\NThen when we want to calculate the
Dialogue: 0,0:04:24.33,0:04:25.48,Default,,0,0,0,,average
Dialogue: 0,0:04:25.48,0:04:29.35,Default,,0,0,0,,of a list we sum
Dialogue: 0,0:04:29.35,0:04:33.78,Default,,0,0,0,,all the elements - the values of the elements -\Nand we divide that
Dialogue: 0,0:04:33.78,0:04:38.02,Default,,0,0,0,,by the length of the list.\NOf course, this is not a very smart
Dialogue: 0,0:04:38.02,0:04:41.78,Default,,0,0,0,,implementation of average, but that\Ndoesn't matter... we're not
Dialogue: 0,0:04:41.78,0:04:45.75,Default,,0,0,0,,here to define average, we're doing\Nthis to learn
Dialogue: 0,0:04:45.75,0:04:51.22,Default,,0,0,0,,GHCi. The thing that we're using here is\Nthis trick here in Haskell
Dialogue: 0,0:04:51.22,0:04:55.28,Default,,0,0,0,,is that when you put a function name
Dialogue: 0,0:04:55.28,0:04:59.39,Default,,0,0,0,,between these single back quotes,
Dialogue: 0,0:04:59.39,0:05:02.58,Default,,0,0,0,,it becomes an infix operator.
Dialogue: 0,0:05:02.58,0:05:06.29,Default,,0,0,0,,So if you write
Dialogue: 0,0:05:06.29,0:05:09.62,Default,,0,0,0,,x `f` y
Dialogue: 0,0:05:09.62,0:05:12.90,Default,,0,0,0,,that's really just syntactic sugar for
Dialogue: 0,0:05:12.90,0:05:18.41,Default,,0,0,0,,f x y. Some people like this thing\Nas an infix operator,
Dialogue: 0,0:05:18.41,0:05:21.64,Default,,0,0,0,,others like it just as a regular\Noperator
Dialogue: 0,0:05:21.64,0:05:25.69,Default,,0,0,0,,- it's your choice.\NThis is syntactic convention. So this is not
Dialogue: 0,0:05:25.69,0:05:26.96,Default,,0,0,0,,a string or anything,
Dialogue: 0,0:05:26.96,0:05:31.44,Default,,0,0,0,,it's really taking a function and turning\Nthat into an infix operator.
Dialogue: 0,0:05:31.44,0:05:35.29,Default,,0,0,0,,Then in GHCi, we call reload
Dialogue: 0,0:05:35.29,0:05:39.02,Default,,0,0,0,,and it will read the file
Dialogue: 0,0:05:39.02,0:05:42.92,Default,,0,0,0,,test.hs, add all the new bindings that we just\Ndefined
Dialogue: 0,0:05:42.92,0:05:46.41,Default,,0,0,0,,- that was for factorial, so we can now\Ncall factorial
Dialogue: 0,0:05:46.41,0:05:49.61,Default,,0,0,0,,and then we can call average as well.
Dialogue: 0,0:05:49.61,0:05:54.52,Default,,0,0,0,,Here you see the workflow:\Nyou have your GHCi open, your editor
Dialogue: 0,0:05:54.52,0:05:58.36,Default,,0,0,0,,you edit, you call reload, and then you\Ncan try
Dialogue: 0,0:05:58.36,0:06:03.43,Default,,0,0,0,,your code out.\NA few syntactic
Dialogue: 0,0:06:03.43,0:06:07.96,Default,,0,0,0,,things, or oddities in Haskell:\Nfunctions
Dialogue: 0,0:06:07.96,0:06:12.48,Default,,0,0,0,,and parameter names must begin with\Nlower case
Dialogue: 0,0:06:12.48,0:06:15.73,Default,,0,0,0,,letters.
Dialogue: 0,0:06:15.73,0:06:19.53,Default,,0,0,0,,If you define a function, it must be
Dialogue: 0,0:06:19.53,0:06:23.01,Default,,0,0,0,,of any of these forms.\NBut any of these
Dialogue: 0,0:06:23.01,0:06:26.72,Default,,0,0,0,,starts with a lower case
Dialogue: 0,0:06:26.72,0:06:30.58,Default,,0,0,0,,letter. You can use a regular quotes
Dialogue: 0,0:06:30.58,0:06:34.31,Default,,0,0,0,,if you're too lazy to\Ninvent a name. That's
Dialogue: 0,0:06:34.31,0:06:37.95,Default,,0,0,0,,something that I often miss in other\Nlanguages, where I just want to say
Dialogue: 0,0:06:37.95,0:06:38.71,Default,,0,0,0,,x prime or
Dialogue: 0,0:06:38.71,0:06:42.52,Default,,0,0,0,,x double prime, et cetera.
Dialogue: 0,0:06:42.52,0:06:47.21,Default,,0,0,0,,If you define a type, a type\Nhas to start with an
Dialogue: 0,0:06:47.21,0:06:51.71,Default,,0,0,0,,uppercase name and that's the\Nreason. In Haskell,
Dialogue: 0,0:06:51.71,0:06:55.13,Default,,0,0,0,,the types and identifiers
Dialogue: 0,0:06:55.13,0:06:58.18,Default,,0,0,0,,are in different namespaces and that's\Ndetermined
Dialogue: 0,0:06:58.18,0:07:01.62,Default,,0,0,0,,by whether it starts with a lower case or
Dialogue: 0,0:07:01.62,0:07:05.54,Default,,0,0,0,,upper case identifier. That can be\Nconfusing if you come from a different
Dialogue: 0,0:07:05.54,0:07:06.83,Default,,0,0,0,,language like
Dialogue: 0,0:07:06.83,0:07:10.99,Default,,0,0,0,,Java, or C# or JavaScript.
Dialogue: 0,0:07:10.99,0:07:15.00,Default,,0,0,0,,The other thing is that in\NHaskell we use
Dialogue: 0,0:07:15.00,0:07:19.80,Default,,0,0,0,,a very mild form of Hungarian\Nnotation.
Dialogue: 0,0:07:19.80,0:07:22.93,Default,,0,0,0,,If a parameter has an
Dialogue: 0,0:07:22.93,0:07:27.70,Default,,0,0,0,,s suffix, so for example if you have a\Nparameter named
Dialogue: 0,0:07:27.70,0:07:31.42,Default,,0,0,0,,xs or ns or nss,
Dialogue: 0,0:07:31.42,0:07:35.84,Default,,0,0,0,,that means a list of values
Dialogue: 0,0:07:35.84,0:07:39.64,Default,,0,0,0,,of type x and this is a list of\Nvalues
Dialogue: 0,0:07:39.64,0:07:44.46,Default,,0,0,0,,of type n - sometimes the n doesn't\Ncorrespond to the
Dialogue: 0,0:07:44.46,0:07:49.36,Default,,0,0,0,,type name - but typically when you see an\Ns at the end you know that it's a list.
Dialogue: 0,0:07:49.36,0:07:52.46,Default,,0,0,0,,If there's 2 s's at the end\N- like here -
Dialogue: 0,0:07:52.46,0:07:55.91,Default,,0,0,0,,you know that it's a list of lists.
Dialogue: 0,0:07:55.91,0:07:59.63,Default,,0,0,0,,Thats by convention. So if you want to\Nlook like a real Haskell programmer,
Dialogue: 0,0:07:59.63,0:08:03.37,Default,,0,0,0,,you should always use this convention.\NWhen your parameter is a list,
Dialogue: 0,0:08:03.37,0:08:07.25,Default,,0,0,0,,it always ends with s, and usually
Dialogue: 0,0:08:07.25,0:08:10.41,Default,,0,0,0,,Haskell identifiers are short
Dialogue: 0,0:08:10.41,0:08:13.90,Default,,0,0,0,,so you don't it elements,\Nyou call it xs.
Dialogue: 0,0:08:13.90,0:08:17.51,Default,,0,0,0,,Another
Dialogue: 0,0:08:17.51,0:08:21.37,Default,,0,0,0,,interesting thing that Haskell has in\Ncommon with by Python
Dialogue: 0,0:08:21.37,0:08:25.05,Default,,0,0,0,,is that white space is significant.\NThe
Dialogue: 0,0:08:25.05,0:08:28.10,Default,,0,0,0,,exact rules are quite subtle, but
Dialogue: 0,0:08:28.10,0:08:32.35,Default,,0,0,0,,we are just using Haskell
Dialogue: 0,0:08:32.35,0:08:35.63,Default,,0,0,0,,in very simple ways, so this
Dialogue: 0,0:08:35.63,0:08:40.88,Default,,0,0,0,,is kind of sufficient. If you have a\Nsequence of definitions - like here -
Dialogue: 0,0:08:40.88,0:08:44.60,Default,,0,0,0,,they all have to start in the same\Ncolumn. Here
Dialogue: 0,0:08:44.60,0:08:47.76,Default,,0,0,0,,a, b and c all start
Dialogue: 0,0:08:47.76,0:08:51.23,Default,,0,0,0,,in the same column.\NIn this case here,
Dialogue: 0,0:08:51.23,0:08:55.30,Default,,0,0,0,,b has a space to the left of it,
Dialogue: 0,0:08:55.30,0:08:58.78,Default,,0,0,0,,so now all these definitions don't start\Nin the same column.
Dialogue: 0,0:08:58.78,0:09:01.86,Default,,0,0,0,,That's wrong!\NOr in this case, c
Dialogue: 0,0:09:01.86,0:09:04.99,Default,,0,0,0,,and a don't start in the same column as b..
Dialogue: 0,0:09:04.99,0:09:08.13,Default,,0,0,0,,also wrong.
Dialogue: 0,0:09:08.13,0:09:11.46,Default,,0,0,0,,White space is significant in Haskell,
Dialogue: 0,0:09:11.46,0:09:15.60,Default,,0,0,0,,so make sure that all your definitions\Nare lined up - this is called the layout rule.
Dialogue: 0,0:09:15.60,0:09:19.29,Default,,0,0,0,,The layout rule
Dialogue: 0,0:09:19.29,0:09:22.66,Default,,0,0,0,,is there to avoid writing
Dialogue: 0,0:09:22.66,0:09:26.08,Default,,0,0,0,,unnecessary syntax.\NHaskell folks
Dialogue: 0,0:09:26.08,0:09:30.05,Default,,0,0,0,,like to write this:\Na = b + c where
Dialogue: 0,0:09:30.05,0:09:33.51,Default,,0,0,0,,and then in the where clause we have\Na list of definitions that
Dialogue: 0,0:09:33.51,0:09:37.23,Default,,0,0,0,,all start in the same column and then d
Dialogue: 0,0:09:37.23,0:09:40.44,Default,,0,0,0,,here stars in the same column as a,
Dialogue: 0,0:09:40.44,0:09:44.06,Default,,0,0,0,,so that belongs to the same group\Nas a.
Dialogue: 0,0:09:44.06,0:09:47.95,Default,,0,0,0,,You can write this with explicit
Dialogue: 0,0:09:47.95,0:09:51.92,Default,,0,0,0,,curly braces and semicolons\N- if you want to -
Dialogue: 0,0:09:51.92,0:09:55.70,Default,,0,0,0,,but that looks a lot more
Dialogue: 0,0:09:55.70,0:09:59.85,Default,,0,0,0,,verbose.\NHaskell programmers like brevity,
Dialogue: 0,0:09:59.85,0:10:03.11,Default,,0,0,0,,so they'll often use significant white\Nspace.
Dialogue: 0,0:10:03.11,0:10:06.64,Default,,0,0,0,,This looks a little bit clowny.
Dialogue: 0,0:10:06.64,0:10:10.52,Default,,0,0,0,,In the Haskell world, when you write code like\Nthis people will look like
Dialogue: 0,0:10:10.52,0:10:14.09,Default,,0,0,0,,"you didn't do enough wax on, wax off".
Dialogue: 0,0:10:14.09,0:10:21.09,Default,,0,0,0,,Here's some GHC commands that are\Nuseful
Dialogue: 0,0:10:21.22,0:10:24.33,Default,,0,0,0,,and I really
Dialogue: 0,0:10:24.33,0:10:29.62,Default,,0,0,0,,invite you to play around with it\NWhen you do the exercises for
Dialogue: 0,0:10:29.62,0:10:33.22,Default,,0,0,0,,subsequent lectures, make sure that you\Nleverage
Dialogue: 0,0:10:33.22,0:10:36.80,Default,,0,0,0,,GHC or whatever other compiler you use,
Dialogue: 0,0:10:36.80,0:10:41.93,Default,,0,0,0,,to help you. We have seen\Nreload, but you can also just
Dialogue: 0,0:10:41.93,0:10:45.82,Default,,0,0,0,,load a fresh script.
Dialogue: 0,0:10:45.82,0:10:49.05,Default,,0,0,0,,From the interpreter
Dialogue: 0,0:10:49.05,0:10:52.43,Default,,0,0,0,,you can open the editor, so you can edit
Dialogue: 0,0:10:52.43,0:10:56.27,Default,,0,0,0,,a file with a certain name,\Nor edit the current script.
Dialogue: 0,0:10:56.27,0:10:59.88,Default,,0,0,0,,This one here is super useful:
Dialogue: 0,0:10:59.88,0:11:03.55,Default,,0,0,0,,it gives the type of an expression and I do\Nthis
Dialogue: 0,0:11:03.55,0:11:08.33,Default,,0,0,0,,all the time - I never write types myself.\NI ask what the type is and I go
Dialogue: 0,0:11:08.33,0:11:11.58,Default,,0,0,0,,in the editor and paste in the type.
Dialogue: 0,0:11:11.58,0:11:15.95,Default,,0,0,0,,You definitely should use :?
Dialogue: 0,0:11:15.95,0:11:19.64,Default,,0,0,0,,and that gives you a list of all the\Ncommands
Dialogue: 0,0:11:19.64,0:11:23.97,Default,,0,0,0,,with a small explanation.\NOf course,
Dialogue: 0,0:11:23.97,0:11:27.35,Default,,0,0,0,,I hope that you will not use this
Dialogue: 0,0:11:27.35,0:11:31.07,Default,,0,0,0,,last command to quit GHC,
Dialogue: 0,0:11:31.07,0:11:34.45,Default,,0,0,0,,but that you will, for the next\Neight weeks,
Dialogue: 0,0:11:34.45,0:11:39.70,Default,,0,0,0,,be constantly using GHC.
Dialogue: 0,0:11:39.70,0:11:43.01,Default,,0,0,0,,There will be a lot of exercises
Dialogue: 0,0:11:43.01,0:11:46.66,Default,,0,0,0,,and the exercises will be on the website.
Dialogue: 0,0:11:46.66,0:11:49.68,Default,,0,0,0,,All these exercises,
Dialogue: 0,0:11:49.68,0:11:54.51,Default,,0,0,0,,you should be able to\Ndo them in any language. You don't
Dialogue: 0,0:11:54.51,0:11:55.60,Default,,0,0,0,,have to use
Dialogue: 0,0:11:55.60,0:11:59.99,Default,,0,0,0,,GHC, but in this case, since this lecture\Nis about
Dialogue: 0,0:11:59.99,0:12:03.02,Default,,0,0,0,,GHC, they will be
Dialogue: 0,0:12:03.02,0:12:06.61,Default,,0,0,0,,GHC-specific.\NIn general,
Dialogue: 0,0:12:06.61,0:12:10.68,Default,,0,0,0,,as I said in the very first lecture, this\Nis a course
Dialogue: 0,0:12:10.68,0:12:15.43,Default,,0,0,0,,about functional programming. It's not a\Ncourse about Haskell and it's definitely
Dialogue: 0,0:12:15.43,0:12:17.32,Default,,0,0,0,,not a course about GHC,
Dialogue: 0,0:12:17.32,0:12:22.02,Default,,0,0,0,,but in this specific case the exercises for\Nthis chapter and
Dialogue: 0,0:12:22.02,0:12:25.25,Default,,0,0,0,,for this lecture are on GHCi.
Dialogue: 0,0:12:25.25,0:12:29.45,Default,,0,0,0,,Happy hacking and\Nsee you all next week!
