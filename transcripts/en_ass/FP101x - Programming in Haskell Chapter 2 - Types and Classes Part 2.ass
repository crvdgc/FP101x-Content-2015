[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.43,0:00:03.67,Default,,0,0,0,,Welcome back everybody to
Dialogue: 0,0:00:03.67,0:00:07.31,Default,,0,0,0,,the lecture 2
Dialogue: 0,0:00:07.31,0:00:10.55,Default,,0,0,0,,about types and classes.
Dialogue: 0,0:00:10.55,0:00:14.00,Default,,0,0,0,,In this part we're going to talk about\Ntypes of
Dialogue: 0,0:00:14.00,0:00:18.75,Default,,0,0,0,,functions and since we are dealing with\Nfunctional programming,
Dialogue: 0,0:00:18.75,0:00:22.05,Default,,0,0,0,,functions, values and types
Dialogue: 0,0:00:22.05,0:00:25.51,Default,,0,0,0,,are very important and since this
Dialogue: 0,0:00:25.51,0:00:29.73,Default,,0,0,0,,can be a little bit difficult for\Nbeginners
Dialogue: 0,0:00:29.73,0:00:34.12,Default,,0,0,0,,please pay attention to this lecture in\Nparticular because
Dialogue: 0,0:00:34.12,0:00:37.76,Default,,0,0,0,,if you miss this you will have\Ndifficulties
Dialogue: 0,0:00:37.76,0:00:42.80,Default,,0,0,0,,in all the remaining lectures. I\Nwill go a little bit slow here
Dialogue: 0,0:00:42.80,0:00:46.55,Default,,0,0,0,,and repeat many times because this is\Nsuper important
Dialogue: 0,0:00:46.55,0:00:50.96,Default,,0,0,0,,that you understand this part. What is a\Nfunction?
Dialogue: 0,0:00:50.96,0:00:54.51,Default,,0,0,0,,A function is a mapping from values
Dialogue: 0,0:00:54.51,0:00:58.21,Default,,0,0,0,,of one type to values of another type\NHere are two
Dialogue: 0,0:00:58.21,0:01:01.87,Default,,0,0,0,,very simple examples of function types\Nthe first one
Dialogue: 0,0:01:01.87,0:01:06.86,Default,,0,0,0,,is the function not (negation) which takes\Na boolean
Dialogue: 0,0:01:06.86,0:01:10.03,Default,,0,0,0,,and returns another boolean.
Dialogue: 0,0:01:10.03,0:01:13.53,Default,,0,0,0,,Nothing too complicated.
Dialogue: 0,0:01:13.53,0:01:16.79,Default,,0,0,0,,Let's look at the second function here:\NisDigit.
Dialogue: 0,0:01:16.79,0:01:20.13,Default,,0,0,0,,isDigit takes a character and checks
Dialogue: 0,0:01:20.13,0:01:25.42,Default,,0,0,0,,whether that character is a digit,\Nwhether that character is 0, 1, ...
Dialogue: 0,0:01:25.42,0:01:30.09,Default,,0,0,0,,up to nine. The type of that is Char to Bool.
Dialogue: 0,0:01:30.09,0:01:34.43,Default,,0,0,0,,What that means is it takes a value in\Nthe set of all characters
Dialogue: 0,0:01:34.43,0:01:38.22,Default,,0,0,0,,and will return a value in the set of\Nbooleans.
Dialogue: 0,0:01:38.22,0:01:43.15,Default,,0,0,0,,In general a function from t1 to t2
Dialogue: 0,0:01:43.15,0:01:48.50,Default,,0,0,0,,is... The type t1 -> t2
Dialogue: 0,0:01:48.50,0:01:51.54,Default,,0,0,0,,is the type of functions that map values
Dialogue: 0,0:01:51.54,0:01:54.63,Default,,0,0,0,,from type t1 to values
Dialogue: 0,0:01:54.63,0:01:58.36,Default,,0,0,0,,of type t2. t1 is
Dialogue: 0,0:01:58.36,0:02:01.90,Default,,0,0,0,,also sometimes called the domain of the\Nfunction
Dialogue: 0,0:02:01.90,0:02:05.43,Default,,0,0,0,,and t2 is sometimes called the range
Dialogue: 0,0:02:05.43,0:02:07.46,Default,,0,0,0,,of the function.
Dialogue: 0,0:02:07.46,0:02:11.82,Default,,0,0,0,,Now you noticed that we write
Dialogue: 0,0:02:11.82,0:02:15.15,Default,,0,0,0,,the arrow of the function type is a nice\Narrow,
Dialogue: 0,0:02:15.15,0:02:20.50,Default,,0,0,0,,but when you use the key board to\Ntype in the actual code
Dialogue: 0,0:02:20.50,0:02:24.48,Default,,0,0,0,,you will type that as a dash followed by\Na greater than sign,
Dialogue: 0,0:02:24.48,0:02:29.34,Default,,0,0,0,,We will use the nicer\Nsyntax here but just you
Dialogue: 0,0:02:29.34,0:02:32.90,Default,,0,0,0,,be careful this is not how you\Ntype in
Dialogue: 0,0:02:32.90,0:02:38.02,Default,,0,0,0,,actually the arrow. When you have a\Nfunction
Dialogue: 0,0:02:38.02,0:02:41.91,Default,,0,0,0,,just like with tuples and with lists
Dialogue: 0,0:02:41.91,0:02:45.03,Default,,0,0,0,,the types for the range and the domain\Nare
Dialogue: 0,0:02:45.03,0:02:48.22,Default,,0,0,0,,unrestricted. For example we can have\Nfunction here
Dialogue: 0,0:02:48.22,0:02:51.45,Default,,0,0,0,,add that takes as the argument a tuple
Dialogue: 0,0:02:51.45,0:02:56.04,Default,,0,0,0,,of two integers and returns as a result\Nanother integer.
Dialogue: 0,0:02:56.04,0:03:01.21,Default,,0,0,0,,add of (x, y) equals x plus y.\NYou see here that
Dialogue: 0,0:03:01.21,0:03:05.33,Default,,0,0,0,,add takes a tuple of two integers
Dialogue: 0,0:03:05.33,0:03:10.15,Default,,0,0,0,,and returns a result that is an integer.\NThe other function here
Dialogue: 0,0:03:10.15,0:03:15.60,Default,,0,0,0,,is a function that takes an Int and\Nreturns a list of integers.
Dialogue: 0,0:03:15.60,0:03:18.94,Default,,0,0,0,,That's perfectly fine and
Dialogue: 0,0:03:18.94,0:03:23.04,Default,,0,0,0,,the definition there: 0 to n returns\Nthe list
Dialogue: 0,0:03:23.04,0:03:27.50,Default,,0,0,0,,[0..n] we have seen in the very\Nfirst lecture
Dialogue: 0,0:03:27.50,0:03:31.42,Default,,0,0,0,,that this square bracket with the
Dialogue: 0,0:03:31.42,0:03:35.23,Default,,0,0,0,,double dots denote the list from zero up\Nto n.
Dialogue: 0,0:03:35.23,0:03:39.90,Default,,0,0,0,,One thing,
Dialogue: 0,0:03:39.90,0:03:43.95,Default,,0,0,0,,if we make the types,
Dialogue: 0,0:03:43.95,0:03:47.51,Default,,0,0,0,,the arguments and the results of function types
Dialogue: 0,0:03:47.51,0:03:52.98,Default,,0,0,0,,arbitrary, they can be functions\Nthemselves and this is where
Dialogue: 0,0:03:52.98,0:03:57.11,Default,,0,0,0,,curried functions come in. Instead of\Ndefining add
Dialogue: 0,0:03:57.11,0:04:00.79,Default,,0,0,0,,to take a tuple of integers and return an\Ninteger
Dialogue: 0,0:04:00.79,0:04:04.85,Default,,0,0,0,,in Haskell it is more common to define add\Nas follows:
Dialogue: 0,0:04:04.85,0:04:09.38,Default,,0,0,0,,we define add as a function that takes an\Ninteger
Dialogue: 0,0:04:09.38,0:04:14.01,Default,,0,0,0,,and returns a function that takes\Nanother integer
Dialogue: 0,0:04:14.01,0:04:17.16,Default,,0,0,0,,and returns an integer.
Dialogue: 0,0:04:17.16,0:04:20.97,Default,,0,0,0,,Look at this type here: add is a\Nfunction,
Dialogue: 0,0:04:20.97,0:04:23.97,Default,,0,0,0,,here we see that from this arrow,
Dialogue: 0,0:04:23.97,0:04:28.00,Default,,0,0,0,,that it takes an integer and returns a\Nfunction
Dialogue: 0,0:04:28.00,0:04:31.88,Default,,0,0,0,,that takes another integer and returns\Nan integer.
Dialogue: 0,0:04:31.88,0:04:36.43,Default,,0,0,0,,That is currying.
Dialogue: 0,0:04:36.43,0:04:39.43,Default,,0,0,0,,By itself currying is not
Dialogue: 0,0:04:39.43,0:04:44.12,Default,,0,0,0,,very complicated. Functions are just
Dialogue: 0,0:04:44.12,0:04:48.15,Default,,0,0,0,,values like lists an integers, there's\Nnothing special about this.
Dialogue: 0,0:04:48.15,0:04:52.33,Default,,0,0,0,,The thing where it becomes confusing is\Nthat
Dialogue: 0,0:04:52.33,0:04:55.72,Default,,0,0,0,,in Haskell you don't have to write these\Narrows here,
Dialogue: 0,0:04:55.72,0:04:59.53,Default,,0,0,0,,because this is so common,
Dialogue: 0,0:04:59.53,0:05:02.99,Default,,0,0,0,,the arrow associates to the right,
Dialogue: 0,0:05:02.99,0:05:06.08,Default,,0,0,0,,which means that you can write this\Ntype as
Dialogue: 0,0:05:06.08,0:05:11.37,Default,,0,0,0,,Int -> Int -> Int and that's where it\Nbecomes confusing for beginners.
Dialogue: 0,0:05:11.37,0:05:15.71,Default,,0,0,0,,You have to really know\Nwhen you read these types where to
Dialogue: 0,0:05:15.71,0:05:16.52,Default,,0,0,0,,put the parentheses.
Dialogue: 0,0:05:16.52,0:05:20.59,Default,,0,0,0,,For now there's nothing special here
Dialogue: 0,0:05:20.59,0:05:25.46,Default,,0,0,0,,add is a function that takes an integer\Nand returns another function that takes
Dialogue: 0,0:05:25.46,0:05:29.52,Default,,0,0,0,,an integer and then returns an integer.
Dialogue: 0,0:05:29.52,0:05:32.63,Default,,0,0,0,,Notice that both add
Dialogue: 0,0:05:32.63,0:05:36.88,Default,,0,0,0,,and add' return the same result,
Dialogue: 0,0:05:36.88,0:05:39.91,Default,,0,0,0,,but the normal add takes
Dialogue: 0,0:05:39.91,0:05:44.18,Default,,0,0,0,,a tuple so it\Ntakes both arguments at the same time
Dialogue: 0,0:05:44.18,0:05:48.15,Default,,0,0,0,,whereas add' takes the arguments
Dialogue: 0,0:05:48.15,0:05:51.19,Default,,0,0,0,,one by one.
Dialogue: 0,0:05:51.19,0:05:54.86,Default,,0,0,0,,Functions that take their arguments one by\None are called
Dialogue: 0,0:05:54.86,0:05:58.30,Default,,0,0,0,,curried functions.
Dialogue: 0,0:05:58.30,0:06:02.00,Default,,0,0,0,,The person that invented
Dialogue: 0,0:06:02.00,0:06:07.15,Default,,0,0,0,,this way of dealing with functions,\Nwhere the functions take the arguments
Dialogue: 0,0:06:07.15,0:06:08.05,Default,,0,0,0,,one by one,
Dialogue: 0,0:06:08.05,0:06:11.44,Default,,0,0,0,,was Haskell B. Curry and Haskell
Dialogue: 0,0:06:11.44,0:06:17.43,Default,,0,0,0,,is named after him. That's where Haskell\Ncomes from, just like Pascal
Dialogue: 0,0:06:17.43,0:06:20.99,Default,,0,0,0,,was named after Blaise Pascal,
Dialogue: 0,0:06:20.99,0:06:24.50,Default,,0,0,0,,Haskell is named after Haskell B. Curry,
Dialogue: 0,0:06:24.50,0:06:30.42,Default,,0,0,0,,the person that invented currying of\Nfunctions.
Dialogue: 0,0:06:30.42,0:06:32.80,Default,,0,0,0,,Every function that takes two arguments
Dialogue: 0,0:06:32.80,0:06:38.36,Default,,0,0,0,,can be turned into a function that takes\Nthese arguments one by one.
Dialogue: 0,0:06:38.36,0:06:42.78,Default,,0,0,0,,For example here's a function mult that\Ntakes three
Dialogue: 0,0:06:42.78,0:06:46.53,Default,,0,0,0,,parameters x, y and z and multiplies them.
Dialogue: 0,0:06:46.53,0:06:49.62,Default,,0,0,0,,mult x y z is x times y times z
Dialogue: 0,0:06:49.62,0:06:53.87,Default,,0,0,0,,One way to write this function would be\Nto take a tuple of
Dialogue: 0,0:06:53.87,0:06:57.30,Default,,0,0,0,,three values x, y and z and then\Nmultiply them.
Dialogue: 0,0:06:57.30,0:07:02.19,Default,,0,0,0,,The Haskell way of doing this is to\Ntake these arguments one by one:
Dialogue: 0,0:07:02.19,0:07:06.19,Default,,0,0,0,,mult x returns a function
Dialogue: 0,0:07:06.19,0:07:10.00,Default,,0,0,0,,that takes another argument y and then
Dialogue: 0,0:07:10.00,0:07:13.07,Default,,0,0,0,,its returns a function that takes\Nanother argument z
Dialogue: 0,0:07:13.07,0:07:17.18,Default,,0,0,0,,and then when you have all these three\Narguments, you can multiply them
Dialogue: 0,0:07:17.18,0:07:20.38,Default,,0,0,0,,to return the final Int.
Dialogue: 0,0:07:20.38,0:07:24.05,Default,,0,0,0,,So mult takes an integer,
Dialogue: 0,0:07:24.05,0:07:28.24,Default,,0,0,0,,returns a function mult x that takes\Nan integer y
Dialogue: 0,0:07:28.24,0:07:33.44,Default,,0,0,0,,that returns a new function mult x y\Nthat takes an integer z
Dialogue: 0,0:07:33.44,0:07:36.57,Default,,0,0,0,,and returns the result x, y and z.
Dialogue: 0,0:07:36.57,0:07:39.73,Default,,0,0,0,,What we see here is that
Dialogue: 0,0:07:39.73,0:07:44.77,Default,,0,0,0,,in the type we still write the parentheses,\Nso the parentheses in the type
Dialogue: 0,0:07:44.77,0:07:48.93,Default,,0,0,0,,go left to right so the\Nfunction arrow
Dialogue: 0,0:07:48.93,0:07:52.15,Default,,0,0,0,,binds to the right but
Dialogue: 0,0:07:52.15,0:07:58.35,Default,,0,0,0,,when we write here mult x y
Dialogue: 0,0:07:58.35,0:08:01.41,Default,,0,0,0,,we don't put parentheses.
Dialogue: 0,0:08:01.41,0:08:05.32,Default,,0,0,0,,if we would put the parentheses there\Nwe would write
Dialogue: 0,0:08:05.32,0:08:10.13,Default,,0,0,0,,(mult x) and then parentheses around that.\NThere the parentheses
Dialogue: 0,0:08:10.13,0:08:14.08,Default,,0,0,0,,associate to the left. For application
Dialogue: 0,0:08:14.08,0:08:18.62,Default,,0,0,0,,the parentheses associate to the left,\Nfor the function arrow
Dialogue: 0,0:08:18.62,0:08:24.10,Default,,0,0,0,,they associate to the right and that\Nmatches up perfectly,
Dialogue: 0,0:08:24.10,0:08:27.26,Default,,0,0,0,,so in practice we don't have to write any\Nparentheses.
Dialogue: 0,0:08:27.26,0:08:30.71,Default,,0,0,0,,Now you can ask yourself
Dialogue: 0,0:08:30.71,0:08:33.72,Default,,0,0,0,,why is this currying useful?
Dialogue: 0,0:08:33.72,0:08:36.83,Default,,0,0,0,,Why are we just like in other languages
Dialogue: 0,0:08:36.83,0:08:38.34,Default,,0,0,0,,why don't we just
Dialogue: 0,0:08:38.34,0:08:43.30,Default,,0,0,0,,have functions that take a whole list of\Nparameters or
Dialogue: 0,0:08:43.30,0:08:46.98,Default,,0,0,0,,like tuple of parameters to be precise in\None go?
Dialogue: 0,0:08:46.98,0:08:51.92,Default,,0,0,0,,why do we do this complicated thing of\Ntaking one argument and then
Dialogue: 0,0:08:51.92,0:08:54.24,Default,,0,0,0,,returning a function that takes the\Nother
Dialogue: 0,0:08:54.24,0:08:58.20,Default,,0,0,0,,parameter etcetera? Well the reason is
Dialogue: 0,0:08:58.20,0:09:01.29,Default,,0,0,0,,that we can partially apply a function.
Dialogue: 0,0:09:01.29,0:09:05.57,Default,,0,0,0,,For example if we have this function add'
Dialogue: 0,0:09:05.57,0:09:10.28,Default,,0,0,0,,that was defined in a curried way, we can\Ndefine a function that
Dialogue: 0,0:09:10.28,0:09:15.22,Default,,0,0,0,,increments a value with 1 by\Npartially applying
Dialogue: 0,0:09:15.22,0:09:19.39,Default,,0,0,0,,add' to one. If we look at that\Ntype there
Dialogue: 0,0:09:19.39,0:09:23.72,Default,,0,0,0,,add' 1 is a function that takes\Nan integer
Dialogue: 0,0:09:23.72,0:09:28.96,Default,,0,0,0,,and returns another integer. When we\Nwill talk lists
Dialogue: 0,0:09:28.96,0:09:33.89,Default,,0,0,0,,in a future lecture, we'll see that\Nthere's many functions
Dialogue: 0,0:09:33.89,0:09:37.94,Default,,0,0,0,,that transform lists into other lists
Dialogue: 0,0:09:37.94,0:09:42.26,Default,,0,0,0,,and most of these functions are also defined\Nin the curried form.
Dialogue: 0,0:09:42.26,0:09:45.83,Default,,0,0,0,,For example the function take here, take 5:
Dialogue: 0,0:09:45.83,0:09:50.53,Default,,0,0,0,,take is defined as a curried function
Dialogue: 0,0:09:50.53,0:09:54.97,Default,,0,0,0,,that takes an integer, returns a function\Nfrom list to list,
Dialogue: 0,0:09:54.97,0:09:58.22,Default,,0,0,0,,which means that we can partially\Napply
Dialogue: 0,0:09:58.22,0:10:01.74,Default,,0,0,0,,take 5 to yield a function
Dialogue: 0,0:10:01.74,0:10:04.96,Default,,0,0,0,,that takes a list of integers to another\Nlist of integers
Dialogue: 0,0:10:04.96,0:10:08.54,Default,,0,0,0,,which just takes the first five\Nelements
Dialogue: 0,0:10:08.54,0:10:12.79,Default,,0,0,0,,of the input list. Similarly the function\Ndrop
Dialogue: 0,0:10:12.79,0:10:16.96,Default,,0,0,0,,takes an integer and returns a function\Nfrom list to list
Dialogue: 0,0:10:16.96,0:10:20.72,Default,,0,0,0,,and what we see here is that we can now\Ndefine drop 5:
Dialogue: 0,0:10:20.72,0:10:25.57,Default,,0,0,0,,we can partially apply drop 5 and it\Nwill return a function
Dialogue: 0,0:10:25.57,0:10:29.20,Default,,0,0,0,,that will take a list, drop the first\Nfive elements
Dialogue: 0,0:10:29.20,0:10:32.26,Default,,0,0,0,,and then return the list. This is super\Nconvenient
Dialogue: 0,0:10:32.26,0:10:35.65,Default,,0,0,0,,
Dialogue: 0,0:10:35.65,0:10:39.35,Default,,0,0,0,,and in Haskell it's very lightweight. The\Nsyntax in Haskell
Dialogue: 0,0:10:39.35,0:10:42.61,Default,,0,0,0,,is optimized to have curried functions
Dialogue: 0,0:10:42.61,0:10:47.37,Default,,0,0,0,,and in that respect Haskell is very very\Ndifferent from
Dialogue: 0,0:10:47.37,0:10:51.95,Default,,0,0,0,,most other languages that are optimized\Nfor functions that take
Dialogue: 0,0:10:51.95,0:10:57.83,Default,,0,0,0,,tuples of arguments. I already mentioned a\Ncouple of times
Dialogue: 0,0:10:57.83,0:11:02.14,Default,,0,0,0,,the way we do the parentheses on
Dialogue: 0,0:11:02.14,0:11:05.79,Default,,0,0,0,,expressions with function parameters.
Dialogue: 0,0:11:05.79,0:11:08.86,Default,,0,0,0,,The arrow associates to the right: if we\Nhave the
Dialogue: 0,0:11:08.86,0:11:11.97,Default,,0,0,0,,type
Dialogue: 0,0:11:11.97,0:11:15.88,Default,,0,0,0,,on the bottom here Int -> Int -> Int -> Int
Dialogue: 0,0:11:15.88,0:11:19.76,Default,,0,0,0,,the parentheses are
Dialogue: 0,0:11:19.76,0:11:24.22,Default,,0,0,0,,associated to the right. Since we don't\Nlike to write parentheses
Dialogue: 0,0:11:24.22,0:11:28.36,Default,,0,0,0,,we can write this thing as Int -> Int -> Int -> Int.
Dialogue: 0,0:11:28.36,0:11:32.31,Default,,0,0,0,,But if we put all the parentheses in there
Dialogue: 0,0:11:32.31,0:11:36.76,Default,,0,0,0,,we get the term here at the bottom, but\Nthis is what we write
Dialogue: 0,0:11:36.76,0:11:40.75,Default,,0,0,0,,because we don't want to write
Dialogue: 0,0:11:40.75,0:11:45.95,Default,,0,0,0,,unnecessary parentheses and as I said\Nalso
Dialogue: 0,0:11:45.95,0:11:49.71,Default,,0,0,0,,when we do function application the
Dialogue: 0,0:11:49.71,0:11:53.27,Default,,0,0,0,,and parentheses associate to the left.
Dialogue: 0,0:11:53.27,0:11:58.43,Default,,0,0,0,,When we partially apply a function\Nyou can write parentheses around that
Dialogue: 0,0:11:58.43,0:12:02.25,Default,,0,0,0,,but we don't have to. When you\Nwrite mult x y z
Dialogue: 0,0:12:02.25,0:12:06.23,Default,,0,0,0,,that really means mult x applied
Dialogue: 0,0:12:06.23,0:12:10.30,Default,,0,0,0,,to y applied to z.
Dialogue: 0,0:12:10.30,0:12:14.45,Default,,0,0,0,,
Dialogue: 0,0:12:14.45,0:12:17.45,Default,,0,0,0,,Unless you're using explicit
Dialogue: 0,0:12:17.45,0:12:22.11,Default,,0,0,0,,tuples, all functions in Haskell are\Nnormally defined
Dialogue: 0,0:12:22.11,0:12:26.25,Default,,0,0,0,,in curried form. In most languages
Dialogue: 0,0:12:26.25,0:12:29.47,Default,,0,0,0,,all functions are defined in
Dialogue: 0,0:12:29.47,0:12:33.50,Default,,0,0,0,,the uncurried form.
Dialogue: 0,0:12:33.50,0:12:37.69,Default,,0,0,0,,This is part 2 about functions.\NThere will be
Dialogue: 0,0:12:37.69,0:12:44.44,Default,,0,0,0,,a lot of exercises to drill this idea of\Nwhere to put the parentheses
Dialogue: 0,0:12:44.44,0:12:48.27,Default,,0,0,0,,in the function type
Dialogue: 0,0:12:48.27,0:12:51.58,Default,,0,0,0,,and where to put the parentheses in the\Nexpressions,
Dialogue: 0,0:12:51.58,0:12:56.09,Default,,0,0,0,,so this become second nature. This is\Nsomething you really have to
Dialogue: 0,0:12:56.09,0:13:00.58,Default,,0,0,0,,keep doing until you don't think\Nabout it anymore.
Dialogue: 0,0:13:00.58,0:13:04.62,Default,,0,0,0,,Alright, please do your exercises
Dialogue: 0,0:13:04.62,0:13:08.49,Default,,0,0,0,,and see you later in the last part
Dialogue: 0,0:13:08.49,0:13:09.51,Default,,0,0,0,,of Chapter 2.
