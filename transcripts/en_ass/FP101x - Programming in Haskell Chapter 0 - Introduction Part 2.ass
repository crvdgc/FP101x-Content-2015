[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: None

[Aegisub Project Garbage]

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:01.81,0:00:03.05,Default,,0,0,0,,Welcome back everybody
Dialogue: 0,0:00:03.05,0:00:06.93,Default,,0,0,0,,to FP101x.
Dialogue: 0,0:00:06.93,0:00:09.99,Default,,0,0,0,,
Dialogue: 0,0:00:09.99,0:00:13.07,Default,,0,0,0,,Let's get started
Dialogue: 0,0:00:13.07,0:00:16.35,Default,,0,0,0,,by giving a little bit of the history of\Nfunctional programming.
Dialogue: 0,0:00:16.35,0:00:19.68,Default,,0,0,0,,When we look at languages like Java or
Dialogue: 0,0:00:19.68,0:00:25.35,Default,,0,0,0,,JavaScript, it's easy to forget that the\Nconcepts of functional programming
Dialogue: 0,0:00:25.35,0:00:28.77,Default,,0,0,0,,are actually quite old and they were
Dialogue: 0,0:00:28.77,0:00:32.25,Default,,0,0,0,,invented way before most of us were
Dialogue: 0,0:00:32.25,0:00:35.54,Default,,0,0,0,,even born.
Dialogue: 0,0:00:35.54,0:00:39.87,Default,,0,0,0,,Here we see Alonzo Church.\NAlonzo Church
Dialogue: 0,0:00:39.87,0:00:44.04,Default,,0,0,0,,in the 1930s, developed the lambda\Ncalculus.
Dialogue: 0,0:00:44.04,0:00:47.96,Default,,0,0,0,,He developed the lambda calculus as\Na basis
Dialogue: 0,0:00:47.96,0:00:51.93,Default,,0,0,0,,for mathematics. He wanted to\Nfind a way
Dialogue: 0,0:00:51.93,0:00:55.10,Default,,0,0,0,,to describe the foundations of\Nmathematics
Dialogue: 0,0:00:55.10,0:00:58.14,Default,,0,0,0,,and it's quite remarkable that it turned\Nout
Dialogue: 0,0:00:58.14,0:01:02.39,Default,,0,0,0,,that his work in the 1930s became
Dialogue: 0,0:01:02.39,0:01:06.61,Default,,0,0,0,,the basis of most of our programming\Nlanguages today.
Dialogue: 0,0:01:06.61,0:01:10.36,Default,,0,0,0,,If you look at Javascript, the language\Nthat powers the web -
Dialogue: 0,0:01:10.36,0:01:14.36,Default,,0,0,0,,and we all know that in JavaScript\Nfunctions
Dialogue: 0,0:01:14.36,0:01:17.67,Default,,0,0,0,,are very important - so one could say
Dialogue: 0,0:01:17.67,0:01:20.78,Default,,0,0,0,,that the web is powered by the lambda\Ncalculus.
Dialogue: 0,0:01:20.78,0:01:24.25,Default,,0,0,0,,Java 8 now
Dialogue: 0,0:01:24.25,0:01:28.29,Default,,0,0,0,,has lambda expressions and C++\Nhas
Dialogue: 0,0:01:28.29,0:01:32.61,Default,,0,0,0,,lambda expressions... there is no\Nprogramming language in use today
Dialogue: 0,0:01:32.61,0:01:35.97,Default,,0,0,0,,that doesn't support this concept that
Dialogue: 0,0:01:35.97,0:01:41.72,Default,,0,0,0,,Alonzo Church invented in the 1930s.\NIf we go
Dialogue: 0,0:01:41.72,0:01:44.97,Default,,0,0,0,,a little bit more towards
Dialogue: 0,0:01:44.97,0:01:48.43,Default,,0,0,0,,current times, in 1950s, John\NMcCarthy
Dialogue: 0,0:01:48.43,0:01:53.00,Default,,0,0,0,,developed Lisp, which was one of the\Nvery first
Dialogue: 0,0:01:53.00,0:01:57.97,Default,,0,0,0,,programming languages ever designed, but\Nit was also the first
Dialogue: 0,0:01:57.97,0:02:02.07,Default,,0,0,0,,functional programming language.\NJohn McCarthy
Dialogue: 0,0:02:02.07,0:02:06.65,Default,,0,0,0,,was influenced by the lambda calculus,\Nbut he also
Dialogue: 0,0:02:06.65,0:02:10.62,Default,,0,0,0,,had imperative assignment
Dialogue: 0,0:02:10.62,0:02:12.29,Default,,0,0,0,,in Lisp.
Dialogue: 0,0:02:12.29,0:02:15.67,Default,,0,0,0,,In some sense you can say that Lisp\Nwas one of the
Dialogue: 0,0:02:15.67,0:02:20.01,Default,,0,0,0,,first modern functional languages that\Ncombines
Dialogue: 0,0:02:20.01,0:02:23.31,Default,,0,0,0,,the ideas from the pure lambda calculus
Dialogue: 0,0:02:23.31,0:02:27.46,Default,,0,0,0,,with some of the imperative features from
Dialogue: 0,0:02:27.46,0:02:33.04,Default,,0,0,0,,programming languages.\NIn 1960,
Dialogue: 0,0:02:33.04,0:02:36.70,Default,,0,0,0,,Peter Landin developed ISWIM.
Dialogue: 0,0:02:36.70,0:02:40.15,Default,,0,0,0,,ISWIM means "If You See What I Mean"
Dialogue: 0,0:02:40.15,0:02:44.20,Default,,0,0,0,,and that was the first pure functional\Nlanguage
Dialogue: 0,0:02:44.20,0:02:48.04,Default,,0,0,0,,based on the lambda calculus, which means
Dialogue: 0,0:02:48.04,0:02:51.93,Default,,0,0,0,,there was no assignment - it was only\Npure functions.
Dialogue: 0,0:02:51.93,0:02:57.76,Default,,0,0,0,,In the 1970s, John Backus
Dialogue: 0,0:02:57.76,0:03:01.34,Default,,0,0,0,,developed FP, which stands for
Dialogue: 0,0:03:01.34,0:03:04.34,Default,,0,0,0,,"Functional Programming". John Backus
Dialogue: 0,0:03:04.34,0:03:07.90,Default,,0,0,0,,happened to be one of the designers of Fortran,
Dialogue: 0,0:03:07.90,0:03:11.62,Default,,0,0,0,,which was designed around the same time
Dialogue: 0,0:03:11.62,0:03:14.97,Default,,0,0,0,,as Lisp and was a very imperative\Nlanguage.
Dialogue: 0,0:03:14.97,0:03:19.84,Default,,0,0,0,,He designed this new language in\Nthe seventies
Dialogue: 0,0:03:19.84,0:03:22.90,Default,,0,0,0,,that emphasizes higher-order functions
Dialogue: 0,0:03:22.90,0:03:26.82,Default,,0,0,0,,and specifically reasoning about\Nprograms.
Dialogue: 0,0:03:26.82,0:03:30.76,Default,,0,0,0,,You want to be able to reason about\Nthe correctness
Dialogue: 0,0:03:30.76,0:03:33.98,Default,,0,0,0,,of your code and FP and
Dialogue: 0,0:03:33.98,0:03:38.51,Default,,0,0,0,,focused on that.\NAlso in the seventies,
Dialogue: 0,0:03:38.51,0:03:41.95,Default,,0,0,0,,Robin Milner, that you see here,
Dialogue: 0,0:03:41.95,0:03:45.01,Default,,0,0,0,,developed ML.
Dialogue: 0,0:03:45.01,0:03:49.44,Default,,0,0,0,,ML also was a a hybrid language that
Dialogue: 0,0:03:49.44,0:03:53.13,Default,,0,0,0,,took ideas from pure functional\Nprogramming, but also
Dialogue: 0,0:03:53.13,0:03:56.23,Default,,0,0,0,,allows imperative assignments.
Dialogue: 0,0:03:56.23,0:03:59.72,Default,,0,0,0,,One interesting detail about ML is that
Dialogue: 0,0:03:59.72,0:04:02.98,Default,,0,0,0,,ML was originally designed as a\Nscripting language.
Dialogue: 0,0:04:02.98,0:04:07.62,Default,,0,0,0,,It was designed as a scripting language\Nto allow people to write proofs.
Dialogue: 0,0:04:07.62,0:04:12.09,Default,,0,0,0,,When you're writing mathematical\Nproofs, there's a lot of boilerplate,
Dialogue: 0,0:04:12.09,0:04:15.93,Default,,0,0,0,,a lot of steps that you have to do and\Nin order to automate that,
Dialogue: 0,0:04:15.93,0:04:20.35,Default,,0,0,0,,Milner and his coworkers developed ML
Dialogue: 0,0:04:20.35,0:04:25.03,Default,,0,0,0,,such that you could write scripts that\Nwould do all these tedious
Dialogue: 0,0:04:25.03,0:04:28.85,Default,,0,0,0,,steps for you.\NOne of the
Dialogue: 0,0:04:28.85,0:04:33.94,Default,,0,0,0,,advances of ML - and keep in mind\Nthat this was in
Dialogue: 0,0:04:33.94,0:04:37.53,Default,,0,0,0,,the seventies - was type inference.
Dialogue: 0,0:04:37.53,0:04:43.00,Default,,0,0,0,,So you could write a function and the\Ncompiler would infer the type for you.
Dialogue: 0,0:04:43.00,0:04:46.93,Default,,0,0,0,,ML also had
Dialogue: 0,0:04:46.93,0:04:50.43,Default,,0,0,0,,polymorphic types, or as we call them
Dialogue: 0,0:04:50.43,0:04:55.49,Default,,0,0,0,,today mostly, generic types, where you\Ncould have
Dialogue: 0,0:04:55.49,0:05:00.63,Default,,0,0,0,,a list of T and then instantiate T\Nwith Int or String or
Dialogue: 0,0:05:00.63,0:05:07.10,Default,,0,0,0,,perhaps even another list.\NThese concepts of type inference
Dialogue: 0,0:05:07.10,0:05:11.24,Default,,0,0,0,,and generics are actually very old and\Nit
Dialogue: 0,0:05:11.24,0:05:14.36,Default,,0,0,0,,took many many decades for these ideas
Dialogue: 0,0:05:14.36,0:05:17.49,Default,,0,0,0,,to move from academia
Dialogue: 0,0:05:17.49,0:05:22.66,Default,,0,0,0,,into the mainstream.
Dialogue: 0,0:05:22.66,0:05:25.95,Default,,0,0,0,,In the seventies and eighties,\NDavid Turner
Dialogue: 0,0:05:25.95,0:05:29.59,Default,,0,0,0,,developed a number of languages, starting\Nwith SASL,
Dialogue: 0,0:05:29.59,0:05:33.50,Default,,0,0,0,,then KRC and ultimately culminating
Dialogue: 0,0:05:33.50,0:05:37.73,Default,,0,0,0,,in Miranda. These were all lazy\Nfunctional languages
Dialogue: 0,0:05:37.73,0:05:41.21,Default,,0,0,0,,and we will see the difference between\Nlazy
Dialogue: 0,0:05:41.21,0:05:44.39,Default,,0,0,0,,and strict functional languages later in\Nthis course.
Dialogue: 0,0:05:44.39,0:05:49.66,Default,,0,0,0,,David Turner has been extremely\Ninfluential because
Dialogue: 0,0:05:49.66,0:05:54.29,Default,,0,0,0,,Haskell, the language that we're\Nusing in this course,
Dialogue: 0,0:05:54.29,0:05:57.56,Default,,0,0,0,,is also a lazy language and it's built
Dialogue: 0,0:05:57.56,0:06:01.73,Default,,0,0,0,,on much of the work that David\NTurner has done
Dialogue: 0,0:06:01.73,0:06:07.22,Default,,0,0,0,,on Miranda, SASL and KRC.\NMy first functional language
Dialogue: 0,0:06:07.22,0:06:10.47,Default,,0,0,0,,ever, when I started to study computer\Nscience
Dialogue: 0,0:06:10.47,0:06:14.38,Default,,0,0,0,,in the eighties, was SASL, so I still
Dialogue: 0,0:06:14.38,0:06:17.44,Default,,0,0,0,,have a special place in my heart for SASL
Dialogue: 0,0:06:17.44,0:06:23.23,Default,,0,0,0,,and we'll definitely have a look
Dialogue: 0,0:06:23.23,0:06:27.69,Default,,0,0,0,,in one of the later sessions at SASL,
Dialogue: 0,0:06:27.69,0:06:31.47,Default,,0,0,0,,because SASL in some sense is\Nthe mother
Dialogue: 0,0:06:31.47,0:06:34.91,Default,,0,0,0,,of Haskell.
Dialogue: 0,0:06:34.91,0:06:37.98,Default,,0,0,0,,Talking about Haskell, around
Dialogue: 0,0:06:37.98,0:06:41.00,Default,,0,0,0,,1987,
Dialogue: 0,0:06:41.00,0:06:46.87,Default,,0,0,0,,a group of programming\Nlanguage researchers and functional language
Dialogue: 0,0:06:46.87,0:06:47.81,Default,,0,0,0,,researchers
Dialogue: 0,0:06:47.81,0:06:52.50,Default,,0,0,0,,started the development of\NHaskell and the idea was to
Dialogue: 0,0:06:52.50,0:06:56.52,Default,,0,0,0,,build a standard language that people\Ncould use to experiment.
Dialogue: 0,0:06:56.52,0:07:01.38,Default,,0,0,0,,Because if you want to experiment\Nwith, say a new type system,
Dialogue: 0,0:07:01.38,0:07:04.81,Default,,0,0,0,,it's a lot of work to build the whole\Ninfrastructure
Dialogue: 0,0:07:04.81,0:07:09.14,Default,,0,0,0,,of the language, the parser, et cetera,\Nfor all you want to do
Dialogue: 0,0:07:09.14,0:07:12.82,Default,,0,0,0,,is to study this new type system.
Dialogue: 0,0:07:12.82,0:07:15.95,Default,,0,0,0,,Haskell has sometimes been called
Dialogue: 0,0:07:15.95,0:07:19.42,Default,,0,0,0,,Petri dish for programming language\Nresearch
Dialogue: 0,0:07:19.42,0:07:24.10,Default,,0,0,0,,and it has served that goal and there\Nhave been written many many papers
Dialogue: 0,0:07:24.10,0:07:27.36,Default,,0,0,0,,where Haskell is used as
Dialogue: 0,0:07:27.36,0:07:32.54,Default,,0,0,0,,as the substrate to do experiments,\Nbut also Haskell has been quite
Dialogue: 0,0:07:32.54,0:07:34.90,Default,,0,0,0,,successful as a language by itself.
Dialogue: 0,0:07:34.90,0:07:38.25,Default,,0,0,0,,Haskell will also be
Dialogue: 0,0:07:38.25,0:07:44.43,Default,,0,0,0,,the language that we will use in\Nthis course. In 2003,
Dialogue: 0,0:07:44.43,0:07:48.06,Default,,0,0,0,,it's kind of interesting,
Dialogue: 0,0:07:48.06,0:07:52.20,Default,,0,0,0,,the Haskell 98 report was published, so\Nthat was quite some years
Dialogue: 0,0:07:52.20,0:07:55.85,Default,,0,0,0,,after the language was finished.
Dialogue: 0,0:07:55.85,0:07:59.02,Default,,0,0,0,,The goal of Haskell 98
Dialogue: 0,0:07:59.02,0:08:02.08,Default,,0,0,0,,was to define a stable version of the\Nlanguage.
Dialogue: 0,0:08:02.08,0:08:05.12,Default,,0,0,0,,Haskell being this research vehicle
Dialogue: 0,0:08:05.12,0:08:09.23,Default,,0,0,0,,has had a lot of extensions and in order to\Nmake this language
Dialogue: 0,0:08:09.23,0:08:13.42,Default,,0,0,0,,used in the mainstream,
Dialogue: 0,0:08:13.42,0:08:17.67,Default,,0,0,0,,the idea was that we needed a stable\Nversion of the language
Dialogue: 0,0:08:17.67,0:08:21.02,Default,,0,0,0,,that only had features that were
Dialogue: 0,0:08:21.02,0:08:25.65,Default,,0,0,0,,consistent and finished, such that\Npeople could rely on them.
Dialogue: 0,0:08:25.65,0:08:28.99,Default,,0,0,0,,In the meantime, Haskell had kept
Dialogue: 0,0:08:28.99,0:08:33.11,Default,,0,0,0,,evolving, but in this course\Nwe will be sticking
Dialogue: 0,0:08:33.11,0:08:36.86,Default,,0,0,0,,to the Haskell 98 subset.
Dialogue: 0,0:08:36.86,0:08:40.97,Default,,0,0,0,,If you're using GHC, as you will see in the\Nnext lecture, GHC
Dialogue: 0,0:08:40.97,0:08:44.40,Default,,0,0,0,,has many extensions, but that
Dialogue: 0,0:08:44.40,0:08:45.39,Default,,0,0,0,,is
Dialogue: 0,0:08:45.39,0:08:49.65,Default,,0,0,0,,a topic for a future course.
Dialogue: 0,0:08:49.65,0:08:52.88,Default,,0,0,0,,We will stick to just Haskell 98.
Dialogue: 0,0:08:52.88,0:08:56.15,Default,,0,0,0,,If we look
Dialogue: 0,0:08:56.15,0:09:01.60,Default,,0,0,0,,at the status of Haskell today, there\Nis the Haskell platform,
Dialogue: 0,0:09:01.60,0:09:07.17,Default,,0,0,0,,which you can download and the course\Nwebsite will have all the information
Dialogue: 0,0:09:07.17,0:09:12.01,Default,,0,0,0,,about that. The course website\Nwill also have information
Dialogue: 0,0:09:12.01,0:09:15.01,Default,,0,0,0,,about other ways to run Haskell programs
Dialogue: 0,0:09:15.01,0:09:19.25,Default,,0,0,0,,and links to other languages that you\Ncan use to do the exercises,
Dialogue: 0,0:09:19.25,0:09:24.44,Default,,0,0,0,,but the Haskell platform provides an\Nimplementation of the Haskell language
Dialogue: 0,0:09:24.44,0:09:29.62,Default,,0,0,0,,plus the standard libraries for the major\Nplatforms: Windows, Mac
Dialogue: 0,0:09:29.62,0:09:33.80,Default,,0,0,0,,and Linux.
Dialogue: 0,0:09:33.80,0:09:38.48,Default,,0,0,0,,This Haskell platform is used all across\Nthe industry
Dialogue: 0,0:09:38.48,0:09:41.71,Default,,0,0,0,,to deliver real software
Dialogue: 0,0:09:41.71,0:09:44.96,Default,,0,0,0,,and also, as we will see,
Dialogue: 0,0:09:44.96,0:09:48.75,Default,,0,0,0,,you can see the influence of Haskell on\Nother languages.
Dialogue: 0,0:09:48.75,0:09:52.04,Default,,0,0,0,,Let's finish here
Dialogue: 0,0:09:52.04,0:09:55.55,Default,,0,0,0,,with a small Haskell program
Dialogue: 0,0:09:55.55,0:09:58.74,Default,,0,0,0,,to show the conciseness of Haskell.
Dialogue: 0,0:09:58.74,0:10:02.45,Default,,0,0,0,,This program here,
Dialogue: 0,0:10:02.45,0:10:05.56,Default,,0,0,0,,what it does
Dialogue: 0,0:10:05.56,0:10:09.05,Default,,0,0,0,,is: it sorts a list using the quicksort\Nalgorithm.
Dialogue: 0,0:10:09.05,0:10:13.70,Default,,0,0,0,,Here's the code; we'll go through it and
Dialogue: 0,0:10:13.70,0:10:17.75,Default,,0,0,0,,after a few lectures you will be able to\Nwrite code like this yourself.
Dialogue: 0,0:10:17.75,0:10:21.85,Default,,0,0,0,,The first thing when we sort a list
Dialogue: 0,0:10:21.85,0:10:26.01,Default,,0,0,0,,is: when we have the empty list -\Nthat's the first case here -
Dialogue: 0,0:10:26.01,0:10:29.72,Default,,0,0,0,,we want to sort the empty list and
Dialogue: 0,0:10:29.72,0:10:33.31,Default,,0,0,0,,the result is the empty list. The\Nempty list is already sorted.
Dialogue: 0,0:10:33.31,0:10:37.14,Default,,0,0,0,,Now the next step here says that if\Nwe have a list
Dialogue: 0,0:10:37.14,0:10:40.14,Default,,0,0,0,,xs that starts with value x,
Dialogue: 0,0:10:40.14,0:10:43.15,Default,,0,0,0,,what we do is: we first
Dialogue: 0,0:10:43.15,0:10:47.41,Default,,0,0,0,,take all the elements a that are less\Nthan x,
Dialogue: 0,0:10:47.41,0:10:51.73,Default,,0,0,0,,we put them in the list called ys then\Nwe take
Dialogue: 0,0:10:51.73,0:10:57.04,Default,,0,0,0,,all the values b that are larger than x,\Nwe put them in the list
Dialogue: 0,0:10:57.04,0:10:58.28,Default,,0,0,0,,zs
Dialogue: 0,0:10:58.28,0:11:01.32,Default,,0,0,0,,and then what we do is we recursively\Nsort
Dialogue: 0,0:11:01.32,0:11:05.31,Default,,0,0,0,,ys with the function f,
Dialogue: 0,0:11:05.31,0:11:08.33,Default,,0,0,0,,so all the values that are less than x
Dialogue: 0,0:11:08.33,0:11:13.14,Default,,0,0,0,,will be sorted. Then we sort all the\Nvalues that are larger than x
Dialogue: 0,0:11:13.14,0:11:16.29,Default,,0,0,0,,(that was zs) and then we concatenate
Dialogue: 0,0:11:16.29,0:11:19.88,Default,,0,0,0,,these two lists with x in the middle.
Dialogue: 0,0:11:19.88,0:11:23.06,Default,,0,0,0,,You can easily see that
Dialogue: 0,0:11:23.06,0:11:26.14,Default,,0,0,0,,the effect of this recursive
Dialogue: 0,0:11:26.14,0:11:30.43,Default,,0,0,0,,call is that we now get a sorted list.
Dialogue: 0,0:11:30.43,0:11:33.62,Default,,0,0,0,,To warn you: this program
Dialogue: 0,0:11:33.62,0:11:37.26,Default,,0,0,0,,just shows you the algorithmic structure
Dialogue: 0,0:11:37.26,0:11:41.16,Default,,0,0,0,,of quicksort - it shows you the\Nrecursive decomposition
Dialogue: 0,0:11:41.16,0:11:44.93,Default,,0,0,0,,of the sorting. The real quicksort, in\Nan imperative
Dialogue: 0,0:11:44.93,0:11:48.37,Default,,0,0,0,,language, doesn't create new lists like\Nhere
Dialogue: 0,0:11:48.37,0:11:54.26,Default,,0,0,0,,(these 2 lists), but it take a single list\Nand mutates the values in place,
Dialogue: 0,0:11:54.26,0:11:58.49,Default,,0,0,0,,such that it only uses the space of\Nthat single list.
Dialogue: 0,0:11:58.49,0:12:01.91,Default,,0,0,0,,But still, if you want to
Dialogue: 0,0:12:01.91,0:12:04.94,Default,,0,0,0,,study the algorithmic structure of\Nquicksort,
Dialogue: 0,0:12:04.94,0:12:08.47,Default,,0,0,0,,this program is quite elegant.
Dialogue: 0,0:12:08.47,0:12:12.29,Default,,0,0,0,,Of course, we can start with this\Nprogram and then we may want to
Dialogue: 0,0:12:12.29,0:12:13.22,Default,,0,0,0,,implement that
Dialogue: 0,0:12:13.22,0:12:16.86,Default,,0,0,0,,in a more efficient way by mutating\Nstate.
Dialogue: 0,0:12:16.86,0:12:20.62,Default,,0,0,0,,Thank you very much!
Dialogue: 0,0:12:20.62,0:12:24.60,Default,,0,0,0,,This was the end of the first lecture.\NHappy hacking
Dialogue: 0,0:12:24.60,0:12:27.63,Default,,0,0,0,,with the exercises on the website
Dialogue: 0,0:12:27.63,0:12:30.48,Default,,0,0,0,,and see you next week for lecture 2.
